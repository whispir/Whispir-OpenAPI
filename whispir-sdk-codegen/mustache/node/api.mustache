export * from './api/apis';
export * from './model/models';
import { VERSION } from './version';
{{#apiInfo}}
{{#apis}}
{{#operations}}
import { {{ classname }} } from './api/{{ classFilename }}';
{{/operations}}
{{/apis}}

type ClientConfig = {
    host: string;
    username?: string;
    password?: string;
    apiKey?: string;
    accessToken?: string;
};

const Client = (config: ClientConfig) => {
    let authHeaders = {};

    if (config.username && config.password && config.apiKey) {
        authHeaders['Authorization'] = `Basic ${Buffer.from(`${config.username}:${config.password}`).toString("base64")}`;
        authHeaders['X-Api-Key'] = config.apiKey;
    } else if (config.accessToken) {
        authHeaders['Authorization'] = config.accessToken;
    } else {
        throw new Error(`Unsupported authorization:
        Please provider either username, password and API Key combination
        OR provide an access token.`);
    }

    const defaultHeaders = {
        'User-Agent': `whispir-node-${VERSION}`,
        ...authHeaders,
    };

    const apiConfig = { defaultHeaders, host: config.host };

    {{#apis}}
    {{#operations}}
    const {{ pathPrefix }} = new {{ classname }}(apiConfig);
    {{/operations}}
    {{/apis}}

    return { 
        {{#apis}}
        {{#operations}}
        {{ pathPrefix }},
        {{/operations}}
        {{/apis}}
    };
};
{{/apiInfo}}

export default Client;
module.exports = Client;
module.exports.default = Client;
