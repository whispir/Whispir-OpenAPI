openapi: 3.0.0
info:
  description: 'Whispir Platform API for cross channel and multi channel communications. Documentation on each endpoint is available at https://developers.whispir.com.'
  version: 1.0.0
  title: Whispir Platform API
  termsOfService: 'https://www.whispir.com/terms-of-service'
  contact:
    email: support@whispir.com
    name: Whispir Support
    url: 'https://www.whispir.com/support'
  license:
    name: MIT
    url: 'https://opensource.org/licenses/MIT'
tags:
  - name: Messages
    description: Communications are the core of what the Whispir Platform API offers as a service to customers.
    externalDocs:
      url: 'https://developers.whispir.com/c2NoOjE0NDgyNjQ-message'
  - name: Resources
    description: 'Using Whispir’s API, one can submit data payloads to be stored by Whispir and used in various API calls. These files are uploaded through the /resources endpoint.'
    externalDocs:
      url: 'https://developers.whispir.com/c2NoOjI0NTEwMjA-resource'
  - name: Templates
    description: 'Using the Whispir Platform API, messages can be stored as Message Templates that can be easily referenced within your API calls.'
    externalDocs:
      url: 'https://developers.whispir.com/c2NoOjM0ODAzNDA4-template'
  - name: Response Rules
    description: Using Response Rules in combination with Message Templates allows users to automatically group responses to messages into different response groups for reporting purposes.
    externalDocs:
      url: 'https://developers.whispir.com/c2NoOjM4OTQzOTA1-response-rule'
  - name: Contacts
    description: 'Contacts form the core of the Whispir offerings. They make up the base data to which and from which all communications are performed. The Whispir API provides secure cloud based storage for your contact information. This can then easily be retrieved by any application or device that requires access, and has permission to do so.'
    externalDocs:
      url: 'https://developers.whispir.com/c2NoOjM0ODAzNDA5-contact'
  - name: Distribution Lists
    description: Whispir’s API allows users to categorise their contacts into different groups to simplify the distribution of messages.
    externalDocs:
      url: 'https://developers.whispir.com/c2NoOjM4OTQzOTE5-distribution-list'
  - name: Scenarios
    description: 'Scenarios allows users to simplify the message delivery processes through automated one click communications. The process involves creating a fixed message or a message template combined with a contact or a distribution list. When the scenario is executed, the message is sent to the contacts.'
    externalDocs:
      url: 'https://developers.whispir.com/c2NoOjM4OTQzOTIw-scenario'
  - name: Callbacks
    description: Whispir utilises API Callbacks to send simple notifications to different registered services in the event that some change has occurred on the Whispir Platform.
    externalDocs:
      url: 'https://developers.whispir.com/c2NoOjM4OTQzOTIx-callback'
  - name: Workspaces
    description: 'Workspace allows application developers to create new work areas for the varying use cases of their application. They provides different functions that can be provided to users of the application, e.g. creating messages, executing scenarios, or viewing distribution lists.'
    externalDocs:
      url: 'https://developers.whispir.com/c2NoOjM4OTQzOTI0-workspace'
  - name: Activities
    description: 'Activities are all the individual changes, tasks, calls, messages.. just about everything performed in a given company workspaces. Each Activity log entry contains information about the workspace, the module (message, email, IVR..), the user who performed it, time stamps, description of the activity, and its status (success, fail) etc.'
    externalDocs:
      url: 'https://developers.whispir.com/c2NoOjQ2MzAxMjM-activity'
  - name: Custom Lists
    description: Custom Lists are user specific translations or preferred options in the various list controls used in the platform tool. These provide the freedom for the user to customize the list options in various modules like Messages and Events. These custom list either can complement or completely overwrite the existing list items.
    externalDocs:
      url: 'https://developers.whispir.com/b3A6Mzg5NDM5NzY-list-custom-lists'
  - name: Users
    description: 'Access to use the Whispir API, Platform and its features is strictly limited to user permission set. One needs to have proper permissions to access all the features provided by the platform, and when using the API, have appropriate permissions to modify the user attributes of themselves or others in their company workspaces.'
    externalDocs:
      url: 'https://developers.whispir.com/c2NoOjU4ODQwOQ-user'
  - name: Events
    description: 'Whispir’s Events API allows users to capture, create and manage Events (including Incidents, Issues, Places, and Assets). Link multi-channel communications to each event to track report and disseminate information textually and Geo-spatially.'
    externalDocs:
      url: 'https://developers.whispir.com/c2NoOjY5MTI5NA-event'
  - name: Imports
    description: The Imports endpoint allows users to import a CSV/JSON/XML file of contacts (via /resources) to be added to the contacts database.
    externalDocs:
      url: 'https://developers.whispir.com/c2NoOjM4OTQzOTI4-import'
  - name: Auth
    description: The Auth endpoint allows users to retrieve and verify a JWT authentication token.
    externalDocs:
      url: 'https://developers.whispir.com/b3A6NDEyMTEzOA-create-an-auth-token'
paths:
  '/workspaces/{workspaceId}/messages':
    post:
      tags:
        - Messages
      summary: Send a message
      description: |
        Communications are the core of what the Whispir Platform API offers as a service to customers.    
        Whispir has the ability to send communications across 7 different channels in a single API request:  
        - **SMS** - up to 1600 characters per message, premium routes, delivery receipts  
        - **Email** - free email messaging with HTML and Plain Text support 
        - **Voice** - high quality outbound voice calls delivered to mobiles and landlines within seconds  
        - **Rich Messages** - personalised, targeted rich messaging to drive conversations  
        - **Twitter** - support for instant publishing to multiple twitter accounts  
        - **Facebook** - simplify the process of publishing to multiple facebook accounts instantaneously  
        - **RSS** - easily generate RSS feeds for consumption by other services

        All communications are driven from the /messages endpoint within the API. This endpoint allows a user to perform the following tasks:
        1.  Create and Send a new message
        2.  Retrieve a list of previously sent messages  

        These are described in more detail below:  
        As message resources can exist in the default (My Company) workspace or other workspace, messages have two access URLs:
        - /messages - for My Company Workspace messages  
        - /workspaces/{workspaceId}/messages - for other Workspace messages  

        If your application does not require separate workspaces, you can simply send all messages from the default My Company workspace.
        * * *

        **Using Templates**  
        Messages can simply specify the Message Template ID in the messages request, instead of specifying the entire content payload.  
        The message template can then easily be changed (using either another API request or by logging in to the Whispir Platform) and the part of the application sending the messages does not need to be altered.  

        * * *

        **Callback Parameters**

        The callback API allows you to pass in any values (parameters), which you want to be returned as is - included in the callback response.

        * * *

        **Sending Messages using event data**  

        Once you have completed creating your event data into the Whispir Platform, the next logical step is to be able to deliver a notification about the event.

        ```
        {
          "to": "+1000000000",
          "subject": "Event Notification",
          "eventId": "2EE7FEA3343662BE",
          "body": "An event has occurred: @@summary@@. A resolution is required by @@actionDate1@@."
        }
        ```

        * * *

        **Sending Messages using template and resources**  
        Assuming there is a template that has already been created with stencil as -  

        Now we have the templateId(for content) with the resourceID (for recipients). Using these two key pieces of information, developers can submit an API request to kick off the Dynamic Messaging process.  

        The smsMappingField should be mapped to the column or key that holds the number to which the SMS has to sent to; and the emailMappingField to the email to which the message has to be sent to.  
      operationId: postMessages
      parameters:
        - $ref: '#/components/parameters/X-Api-Key'
        - name: Content-Type
          in: header
          required: true
          description: Application specific mime-type
          schema:
            type: string
            enum:
              - application/vnd.whispir.message-v1+json
              - application/vnd.whispir.bulkmessage-v1+json
              - application/vnd.whispir.message-v1+xml
              - application/vnd.whispir.bulkmessage-v1+xml
        - name: Accept
          in: header
          required: true
          description: Application specific mime-type
          schema:
            type: string
            enum:
              - application/vnd.whispir.message-v1+json
              - application/vnd.whispir.bulkmessage-v1+json
              - application/vnd.whispir.message-v1+xml
              - application/vnd.whispir.bulkmessage-v1+xml
      requestBody:
        content:
          application/vnd.whispir.message-v1+json:
            schema:
              $ref: '#/components/schemas/message'
          application/vnd.whispir.bulkmessage-v1+json:
            schema:
              $ref: '#/components/schemas/message'
          application/vnd.whispir.message-v1+xml:
            schema:
              $ref: '#/components/schemas/message'
          application/vnd.whispir.bulkmessage-v1+xml:
            schema:
              $ref: '#/components/schemas/message'
        description: 'Message object needed to create message. At least one of the Body fields must be populated [SMS, email, voice or web].'
        required: true
      responses:
        '202':
          description: Accepted
          content:
            application/vnd.whispir.message-v1+json:
              schema:
                type: string
                enum:
                  - Your request has been accepted for processing
              examples:
                Response:
                  value: Your request has been accepted for processing
          headers:
            Content-Type:
              $ref: '#/components/headers/Message-Content-Type'
            Content-Length:
              $ref: '#/components/headers/Content-Length'
            Access-Control-Allow-Origin:
              $ref: '#/components/headers/Access-Control-Allow-Origin'
            Location:
              schema:
                type: string
              example: 'https://api.au.whispir.com/workspaces/9A4C5521FFC7B15B/messages/747AB7E716C1802B6476784AEB5C9BB8'
              description: The URI to fetch details of the resource.
    get:
      tags:
        - Messages
      summary: List messages
      description: |-
        List all sent messages for the workspace.

        Pagination is available.
      operationId: getMessages
      parameters:
        - $ref: '#/components/parameters/X-Api-Key'
        - name: Content-Type
          in: header
          required: true
          description: Application specific mime-type
          schema:
            type: string
            enum:
              - application/vnd.whispir.message-v1+json
              - application/vnd.whispir.bulkmessage-v1+json
              - application/vnd.whispir.message-v1+xml
              - application/vnd.whispir.bulkmessage-v1+xml
        - name: Accept
          in: header
          required: true
          description: Application specific mime-type
          schema:
            type: string
            enum:
              - application/vnd.whispir.message-v1+json
              - application/vnd.whispir.bulkmessage-v1+json
              - application/vnd.whispir.message-v1+xml
              - application/vnd.whispir.bulkmessage-v1+xml
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/offset'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                description: ''
                type: object
                x-examples:
                  example-1:
                    messages:
                      - subject: Test Message
                        repetitionCount: 0
                        repeatDays: 0
                        repeatHrs: 0
                        repeatMin: 0
                        from: Test User
                        direction: OUTGOING
                        responseCount: '0'
                        createdTime: 1647467664000
                        link:
                          - uri: 'https://api.au.whispir.com/workspaces/9A4C5521FFC7B15B/messages/E9F52215AD0787EBECDD691916955C1E'
                            rel: self
                            method: GET
                            host: api.au.whispir.com
                            port: -1
                        whatsappValidMessage: true
                        validBody: false
                        validSubject: true
                      - subject: Test Message
                        repetitionCount: 0
                        repeatDays: 0
                        repeatHrs: 0
                        repeatMin: 0
                        from: Test User
                        direction: OUTGOING
                        responseCount: '0'
                        createdTime: 1647466923000
                        link:
                          - uri: 'https://api.au.whispir.com/workspaces/9A4C5521FFC7B15B/messages/747AB7E716C1802B6476784AEB5C9BB8'
                            rel: self
                            method: GET
                            host: api.au.whispir.com
                            port: -1
                        whatsappValidMessage: true
                        validBody: false
                        validSubject: true
                    status: ''
                    link: []
                properties:
                  messages:
                    type: array
                    uniqueItems: true
                    minItems: 1
                    items:
                      type: object
                      properties:
                        subject:
                          type: string
                          example: Test Message
                        repetitionCount:
                          type: number
                          example: 0
                        repeatDays:
                          type: number
                          example: 0
                        repeatHrs:
                          type: number
                          example: 0
                        repeatMin:
                          type: number
                          example: 0
                        from:
                          type: string
                          example: Test User
                        direction:
                          type: string
                          enum:
                            - OUTGOING
                          readOnly: true
                        responseCount:
                          type: string
                          example: '0'
                        createdTime:
                          type: number
                          example: 1647467664000
                        link:
                          type: array
                          uniqueItems: true
                          minItems: 1
                          items:
                            type: object
                            properties:
                              uri:
                                type: string
                                example: 'https://api.au.whispir.com/workspaces/9A4C5521FFC7B15B/messages/747AB7E716C1802B6476784AEB5C9BB8'
                              rel:
                                type: string
                                example: self
                              method:
                                type: string
                                example: GET
                              host:
                                type: string
                                example: api.au.whispir.com
                              port:
                                type: number
                                enum:
                                  - -1
                            required:
                              - uri
                              - rel
                              - method
                              - host
                              - port
                        whatsappValidMessage:
                          type: boolean
                        validBody:
                          type: boolean
                        validSubject:
                          type: boolean
                      required:
                        - subject
                        - repetitionCount
                        - repeatDays
                        - repeatHrs
                        - repeatMin
                        - from
                        - direction
                        - responseCount
                        - createdTime
                        - whatsappValidMessage
                        - validBody
                        - validSubject
                  status:
                    type: string
                    example: ''
                  link:
                    type: array
                    items: {}
                required:
                  - messages
                  - status
                  - link
              examples:
                Response:
                  value:
                    messages:
                      - subject: Test Message
                        repetitionCount: 0
                        repeatDays: 0
                        repeatHrs: 0
                        repeatMin: 0
                        from: Test User
                        direction: OUTGOING
                        responseCount: '0'
                        createdTime: 1647467664000
                        link:
                          - uri: 'https://api.au.whispir.com/workspaces/9A4C5521FFC7B15B/messages/747AB7E716C1802B6476784AEB5C9BB8'
                            rel: self
                            method: GET
                            host: api.au.whispir.com
                            port: -1
                        whatsappValidMessage: true
                        validBody: true
                        validSubject: true
                      - subject: Test Message
                        repetitionCount: 0
                        repeatDays: 0
                        repeatHrs: 0
                        repeatMin: 0
                        from: Test User
                        direction: OUTGOING
                        responseCount: '0'
                        createdTime: 1647466923000
                        link:
                          - uri: 'https://api.au.whispir.com/workspaces/9A4C5521FFC7B15B/messages/E9F52215AD0787EBECDD691916955C1E'
                            rel: self
                            method: GET
                            host: api.au.whispir.com
                            port: -1
                        whatsappValidMessage: true
                        validBody: true
                        validSubject: true
                    status: ''
                    link: []
          headers:
            Content-Type:
              $ref: '#/components/headers/Message-Content-Type'
            Content-Length:
              $ref: '#/components/headers/Content-Length'
            Access-Control-Allow-Origin:
              $ref: '#/components/headers/Access-Control-Allow-Origin'
    parameters:
      - $ref: '#/components/parameters/workspaceId'
  '/workspaces/{workspaceId}/messages/{messageId}':
    get:
      tags:
        - Messages
      summary: Retrieve a message
      description: |-
        Each of the URLs specified in the response can be accessed using the REL and appropriate METHOD to perform the specified functionality.

        **Rel Attribute Descriptions**

        * * *

        - **self:** Retrieves the current message.  

        - **summaryStatus:** Returns the status information of the message as a messagestatus object, in a summary view.  

        - **detailedStatus:** Returns the status information of the message as a messagestatus object, in a detailed view.  

        - **summaryResponses:** Returns the response information of the message as a messageresponse object, in a summary view.  

        - **detailedResponses:** Returns the response information of the message as a messageresponse object, in a detailed view.  
        - **summaryResponsesWithResponseRule:** Returns the response information of the message as a messageresponse object, filtered by the Response Rule (if one was used) in a summary view.  

        - **detailedResponsesWithResponseRule:** Returns the response information of the message as a messageresponse object, filtered by the Response Rule (if one was used) in a detailed view.
      operationId: getMessageById
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              $ref: '#/components/headers/Message-Content-Type'
            Content-Length:
              $ref: '#/components/headers/Content-Length'
            Access-Control-Allow-Origin:
              $ref: '#/components/headers/Access-Control-Allow-Origin'
          content:
            application/vnd.whispir.message-v1+json:
              schema:
                description: ''
                type: object
                x-examples:
                  example-1:
                    to: '61400400400'
                    subject: Test Message
                    body: This is the body of my test SMS message
                    label: ''
                    type: default
                    repetitionCount: 0
                    dlr:
                      period: ''
                      rule: ''
                      type: ''
                      publishToWeb: false
                      expiryDay: 0
                      expiryHour: 0
                      expiryMin: 0
                      feedIds: ''
                      bool: false
                    repeatDays: 0
                    repeatHrs: 0
                    repeatMin: 0
                    voice: {}
                    from: rfontein.au@User.whispir.com
                    direction: OUTGOING
                    responseCount: '0'
                    social:
                      social:
                        - id: social
                        - id: social_long
                    createdTime: 1647466923000
                    link:
                      - uri: 'https://api.au.whispir.com/workspaces/9A4C5521FFC7B15B/messages/747AB7E716C1802B6476784AEB5C9BB8'
                        rel: self
                        method: GET
                        host: api.au.whispir.com
                        port: -1
                      - uri: 'https://api.au.whispir.com/workspaces/9A4C5521FFC7B15B/messages/747AB7E716C1802B6476784AEB5C9BB8/messagestatus?view=summary'
                        rel: summaryStatus
                        method: GET
                        host: api.au.whispir.com
                        port: -1
                      - uri: 'https://api.au.whispir.com/workspaces/9A4C5521FFC7B15B/messages/747AB7E716C1802B6476784AEB5C9BB8/messagestatus?view=detailed'
                        rel: detailedStatus
                        method: GET
                        host: api.au.whispir.com
                        port: -1
                      - uri: 'https://api.au.whispir.com/workspaces/9A4C5521FFC7B15B/messages/747AB7E716C1802B6476784AEB5C9BB8/messageresponses?view=summary&filter=default'
                        rel: summaryResponses
                        method: GET
                        host: api.au.whispir.com
                        port: -1
                      - uri: 'https://api.au.whispir.com/workspaces/9A4C5521FFC7B15B/messages/747AB7E716C1802B6476784AEB5C9BB8/messageresponses?view=detailed&filter=default'
                        rel: detailedResponses
                        method: GET
                        host: api.au.whispir.com
                        port: -1
                      - uri: 'https://api.au.whispir.com/workspaces/9A4C5521FFC7B15B/messages/747AB7E716C1802B6476784AEB5C9BB8/messageresponses?view=summary&filter=responserule'
                        rel: summaryResponsesWithResponseRule
                        method: GET
                        host: api.au.whispir.com
                        port: -1
                      - uri: 'https://api.au.whispir.com/workspaces/9A4C5521FFC7B15B/messages/747AB7E716C1802B6476784AEB5C9BB8/messageresponses?view=detailed&filter=responserule'
                        rel: detailedResponsesWithResponseRule
                        method: GET
                        host: api.au.whispir.com
                        port: -1
                    validBody: true
                    validSubject: true
                    whatsappValidMessage: true
                properties:
                  to:
                    type: string
                    example: '61400400400'
                  subject:
                    type: string
                    example: Test Message
                  body:
                    type: string
                    example: This is the body of my test SMS message
                  label:
                    type: string
                  type:
                    type: string
                    example: default
                  repetitionCount:
                    type: number
                    example: 0
                  dlr:
                    type: object
                    required:
                      - period
                      - rule
                      - type
                      - publishToWeb
                      - expiryDay
                      - expiryHour
                      - expiryMin
                      - feedIds
                      - bool
                    properties:
                      period:
                        type: string
                      rule:
                        type: string
                      type:
                        type: string
                      publishToWeb:
                        type: boolean
                      expiryDay:
                        type: number
                        example: 0
                      expiryHour:
                        type: number
                        example: 0
                      expiryMin:
                        type: number
                        example: 0
                      feedIds:
                        type: string
                      bool:
                        type: boolean
                  repeatDays:
                    type: number
                    example: 0
                  repeatHrs:
                    type: number
                    example: 0
                  repeatMin:
                    type: number
                    example: 0
                  voice:
                    type: object
                  from:
                    type: string
                    example: testUser.au@User.whispir.com
                  direction:
                    type: string
                    readOnly: true
                  responseCount:
                    type: string
                    example: '0'
                  social:
                    type: object
                    required:
                      - social
                    properties:
                      social:
                        type: array
                        uniqueItems: true
                        minItems: 1
                        items:
                          type: object
                          properties:
                            id:
                              type: string
                          required:
                            - id
                  createdTime:
                    type: number
                    example: 1647466923000
                  link:
                    type: array
                    uniqueItems: true
                    maxItems: 7
                    minItems: 7
                    items:
                      type: object
                      properties:
                        uri:
                          type: string
                          example: 'https://api.au.whispir.com/workspaces/9A4C5521FFC7B15B/messages/747AB7E716C1802B6476784AEB5C9BB8'
                        rel:
                          type: string
                          enum:
                            - self
                            - summaryStatus
                            - detailedStatus
                            - summaryResponses
                            - detailedResponses
                            - summaryResponsesWithResponseRule
                            - detailedResponsesWithResponseRule
                        method:
                          type: string
                          example: GET
                        host:
                          type: string
                          example: api.au.whispir.com
                        port:
                          type: number
                          enum:
                            - -1
                      required:
                        - uri
                        - rel
                        - method
                        - host
                        - port
                  validBody:
                    type: boolean
                  validSubject:
                    type: boolean
                  whatsappValidMessage:
                    type: boolean
                required:
                  - to
                  - subject
                  - body
                  - label
                  - type
                  - repetitionCount
                  - dlr
                  - repeatDays
                  - repeatHrs
                  - repeatMin
                  - voice
                  - from
                  - direction
                  - responseCount
                  - social
                  - createdTime
                  - link
                  - validBody
                  - validSubject
                  - whatsappValidMessage
              examples:
                Response:
                  value:
                    to: '61400400400'
                    subject: Test Message
                    body: This is the body of my test SMS message
                    label: ''
                    type: default
                    repetitionCount: 0
                    dlr:
                      period: ''
                      rule: ''
                      type: ''
                      publishToWeb: false
                      expiryDay: 0
                      expiryHour: 0
                      expiryMin: 0
                      feedIds: ''
                      bool: false
                    repeatDays: 0
                    repeatHrs: 0
                    repeatMin: 0
                    voice: {}
                    from: testUser.au@User.whispir.com
                    direction: OUTGOING
                    responseCount: '0'
                    social:
                      social:
                        - id: social
                        - id: social_long
                    createdTime: 1647466923000
                    link:
                      - uri: 'https://api.au.whispir.com/workspaces/9A4C5521FFC7B15B/messages/747AB7E716C1802B6476784AEB5C9BB8'
                        rel: self
                        method: GET
                        host: api.au.whispir.com
                        port: -1
                      - uri: 'https://api.au.whispir.com/workspaces/9A4C5521FFC7B15B/messages/747AB7E716C1802B6476784AEB5C9BB8/messagestatus?view=summary'
                        rel: summaryStatus
                        method: GET
                        host: api.au.whispir.com
                        port: -1
                      - uri: 'https://api.au.whispir.com/workspaces/9A4C5521FFC7B15B/messages/747AB7E716C1802B6476784AEB5C9BB8/messagestatus?view=detailed'
                        rel: detailedStatus
                        method: GET
                        host: api.au.whispir.com
                        port: -1
                      - uri: 'https://api.au.whispir.com/workspaces/9A4C5521FFC7B15B/messages/747AB7E716C1802B6476784AEB5C9BB8/messageresponses?view=summary&filter=default'
                        rel: summaryResponses
                        method: GET
                        host: api.au.whispir.com
                        port: -1
                      - uri: 'https://api.au.whispir.com/workspaces/9A4C5521FFC7B15B/messages/747AB7E716C1802B6476784AEB5C9BB8/messageresponses?view=detailed&filter=default'
                        rel: detailedResponses
                        method: GET
                        host: api.au.whispir.com
                        port: -1
                      - uri: 'https://api.au.whispir.com/workspaces/9A4C5521FFC7B15B/messages/747AB7E716C1802B6476784AEB5C9BB8/messageresponses?view=summary&filter=responserule'
                        rel: summaryResponsesWithResponseRule
                        method: GET
                        host: api.au.whispir.com
                        port: -1
                      - uri: 'https://api.au.whispir.com/workspaces/9A4C5521FFC7B15B/messages/747AB7E716C1802B6476784AEB5C9BB8/messageresponses?view=detailed&filter=responserule'
                        rel: detailedResponsesWithResponseRule
                        method: GET
                        host: api.au.whispir.com
                        port: -1
                    validBody: true
                    validSubject: true
                    whatsappValidMessage: true
      parameters:
        - $ref: '#/components/parameters/X-Api-Key'
        - name: Content-Type
          in: header
          required: true
          description: Application specific mime-type
          schema:
            type: string
            enum:
              - application/vnd.whispir.message-v1+json
              - application/vnd.whispir.bulkmessage-v1+json
              - application/vnd.whispir.message-v1+xml
              - application/vnd.whispir.bulkmessage-v1+xml
        - name: Accept
          in: header
          required: true
          description: Application specific mime-type
          schema:
            type: string
            enum:
              - application/vnd.whispir.message-v1+json
              - application/vnd.whispir.bulkmessage-v1+json
              - application/vnd.whispir.message-v1+xml
              - application/vnd.whispir.bulkmessage-v1+xml
        - schema:
            type: string
            pattern: '^[A-F0-9]+'
          name: messageId
          in: path
          required: true
          description: The identifier for the message.
    parameters:
      - $ref: '#/components/parameters/workspaceId'
  '/workspaces/{workspaceId}/messages/{messageId}/messagestatus':
    get:
      summary: Retrieve a message status
      description: |
        Whispir will automatically monitor the status of each message after it has been sent to each recipient. Using the message status information, you are able to determine who received the message, what exact time they received it, on what message channel (SMS, Email, Voice, Web, Push Notification), whether they replied to the message, what time they replied, and on what messaging channel.  


          Each message progresses through various states, from Pending to Acknowledged.


        ### Message Status Descriptions

        - **Pending (PENDING):** The message has not yet been processed by Whispir. It is in a queue and will be processed shortly.
        - **Sent (SENT):** The message has been sent from Whispir to the recipient, however, there has been no acknowledgement from the recipient via read receipt that the message has arrived.
        - **Received (DELIVRD):**
          - **Email:** Whispir has received acknowledgement via a read receipt that the message has arrived in the inbox.
          - **SMS:** Received status can mean one of two things for SMS.
            1.  The message has been received by the network and is being processed for delivery to the handset.  
                How long the message stays in this state is up to the telco.
            2.  The message has been received by the handset and confirmed by the telco.
        - **Acknowledged (READ):** Whispir has received an intended response from the recipient, either by reply SMS, Email or Voice prompt
        - **Undeliverable (FAILED):** Whispir was not able to deliver the message to the intended recipient on the specified channel. This may be due to incorrect information e.g. wrong phone number or email address, or due to poor network coverage.

        Using the API, developers are able to access this status information at either a Summary or Detailed level.

        The first thing a developer must do in order to retrieve the status of a sent message is retrieve the message using the API.

        ### Retrieve Summary Status

        Using the links provided in the message response, the user can simply make a new API request to retrieve the summaryStatus URL.

        In the example above, the summaryStatus URL is:

        So the request would look as follows:

        `GET /messages/069BF68E5E0FE99B/messagestatus?view=summary`

        As this is a GET request we don’t have to provide any message body.

        This response states that of the 2 people that were sent the message, both of them Acknowledged it by sending a response.

        Your application can use this information to easily determine the numbers of recipients in each state and show a small graph.

        ### Retrieve Detailed Status

        Similar to the summaryStatus, using the links provided in the message response, the user can simply make a new API request to retrieve the detailedStatus URL.

        `GET /messages/069BF68E5E0FE99B/messagestatus?view=detailed`

        As this is a GET request we don’t have to provide any message body.

        The user can easily use this information to receive a far more detailed status breakdown of (for each recipient):

        *   The name of the recipient
        *   The channel type (SMS, Email, Voice, Web)
        *   The sent timestamp for each channel
        *   The received timestamp for each channel
        *   The acknowledged timestamp for each channel
        *   The undeliverable timestamp (only present when the channel is undeliverable)
        *   The overall status for this recipient (PENDING, SENT, DELIVRD, READ, FAILED)
        *   The information text describing how this message has progressed.

        Once you have processed the status information, the next likely piece of information you will be looking to find is the content of the responses (if any). The section on Message Responses describes how to retrieve this information.
      operationId: getMessageStatus
      parameters:
        - $ref: '#/components/parameters/X-Api-Key'
        - name: messageId
          in: path
          description: Enter message id
          required: true
          schema:
            type: string
            example: 44F4DA8F04755430BEC5A0E1E2154EBA
        - name: Accept
          in: header
          required: true
          description: Application specific mime-type
          schema:
            type: string
            enum:
              - application/vnd.whispir.messagestatus-v1+json
              - application/vnd.whispir.messagestatus-v1+xml
        - name: Content-Type
          in: header
          required: true
          description: Application specific mime-type
          schema:
            type: string
            enum:
              - application/vnd.whispir.messagestatus-v1+json
              - application/vnd.whispir.messagestatus-v1+xml
        - name: view
          in: query
          required: false
          description: The view for the message status.
          schema:
            type: string
            enum:
              - summary
              - detailed
            default: summary
        - name: filter
          schema:
            type: string
            enum:
              - default
              - responserule
            default: default
          in: query
          description: The filter for the message status.
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              $ref: '#/components/headers/Message-Status-Content-Type'
            Content-Length:
              $ref: '#/components/headers/Content-Length'
            Access-Control-Allow-Origin:
              $ref: '#/components/headers/Access-Control-Allow-Origin'
          content:
            application/vnd.whispir.messagestatus-v1+json:
              examples:
                Summary:
                  value:
                    messageStatuses:
                      - link:
                          - uri: 'https://api.au.whispir.com/workspaces/9A4C5521FFC7B15B/messages/747AB7E716C1802B6476784AEB5C9BB8/messagestatus'
                            rel: self
                            method: GET
                            host: api.au.whispir.com
                            port: -1
                        categories:
                          - name: Sent
                            recipientCount: 0
                            percentageTotal: 0.0%
                          - name: Pending
                            recipientCount: 0
                            percentageTotal: 0.0%
                          - name: Received
                            recipientCount: 1
                            percentageTotal: 100.0%
                          - name: Acknowledged
                            recipientCount: 0
                            percentageTotal: 0.0%
                          - name: Undeliverable
                            recipientCount: 0
                            percentageTotal: 0.0%
                    link: []
                Detailed:
                  value:
                    messageStatuses:
                      - name: '61400400400'
                        info: '  SMS message sent. SMSCODE=008 SMS message received by device. SMSCODE=001 '
                        link:
                          - uri: 'https://api.au.whispir.com/workspaces/9A4C5521FFC7B15B/messages/747AB7E716C1802B6476784AEB5C9BB8/messagestatus?view=detailed'
                            rel: self
                            method: GET
                            host: api.au.whispir.com
                            port: -1
                        status:
                          - type: email
                            status: ''
                            destination: ''
                          - type: sms
                            status: DELIVRD
                            destination: '61400400400'
                            sentTimestamp: 1647466923000
                            receivedTimestamp: 1647466931000
                          - type: voice
                            status: ''
                            destination: ''
                    status: '1 to 1 of 1    '
                    link: []
              schema:
                description: ''
                type: object
                x-examples:
                  example-1:
                    messageStatuses:
                      - link:
                          - uri: 'https://api.au.whispir.com/workspaces/9A4C5521FFC7B15B/messages/747AB7E716C1802B6476784AEB5C9BB8/messagestatus'
                            rel: self
                            method: GET
                            host: api.au.whispir.com
                            port: -1
                        categories:
                          - name: Sent
                            recipientCount: 0
                            percentageTotal: 0.0%
                          - name: Pending
                            recipientCount: 0
                            percentageTotal: 0.0%
                          - name: Received
                            recipientCount: 1
                            percentageTotal: 100.0%
                          - name: Acknowledged
                            recipientCount: 0
                            percentageTotal: 0.0%
                          - name: Undeliverable
                            recipientCount: 0
                            percentageTotal: 0.0%
                    link: []
                properties:
                  messageStatuses:
                    type: array
                    uniqueItems: true
                    items:
                      type: object
                      properties:
                        link:
                          type: array
                          uniqueItems: true
                          minItems: 1
                          items:
                            type: object
                            properties:
                              uri:
                                type: string
                                example: 'https://api.au.whispir.com/workspaces/9A4C5521FFC7B15B/messages/747AB7E716C1802B6476784AEB5C9BB8/messagestatus'
                              rel:
                                type: string
                                example: self
                              method:
                                type: string
                                example: GET
                              host:
                                type: string
                                example: api.au.whispir.com
                              port:
                                type: number
                                enum:
                                  - -1
                            required:
                              - uri
                              - rel
                              - method
                              - host
                              - port
                        categories:
                          type: array
                          uniqueItems: true
                          minItems: 5
                          maxItems: 5
                          description: Present when `view` is `summary`.
                          items:
                            type: object
                            additionalProperties: false
                            properties:
                              name:
                                type: string
                                enum:
                                  - Sent
                                  - Pending
                                  - Received
                                  - Acknowledged
                                  - Undeliverable
                              recipientCount:
                                type: number
                                example: 1
                              percentageTotal:
                                type: string
                                example: 100.0%
                            required:
                              - name
                              - recipientCount
                              - percentageTotal
                        name:
                          type: string
                          example: '61400400400'
                          description: Present when `view` is `detailed`.
                        info:
                          type: string
                          example: '  SMS message sent. SMSCODE=008 SMS message received by device. SMSCODE=001 '
                          description: Present when `view` is `detailed`.
                        status:
                          type: array
                          description: Present when `view` is `detailed`.
                          items:
                            properties:
                              type:
                                type: string
                                enum:
                                  - sms
                                  - email
                                  - voice
                              status:
                                type: string
                                enum:
                                  - ''
                                  - PENDING
                                  - SENT
                                  - DELIVRD
                                  - READ
                                  - FAILED
                              destination:
                                type: string
                                example: '61400400400'
                              sentTimestamp:
                                type: number
                                example: 1647466923000
                              receivedTimestamp:
                                type: number
                                example: 1647466931000
                            required:
                              - type
                              - status
                              - destination
                      required:
                        - link
                  link:
                    type: array
                    items: {}
                  status:
                    type: string
                    example: '1 to 1 of 1    '
                    description: Present when `view` is `detailed`.
                required:
                  - messageStatuses
                  - link
      tags:
        - Messages
    parameters:
      - $ref: '#/components/parameters/workspaceId'
  '/workspaces/{workspaceId}/messages/{messageId}/messageresponses':
    get:
      summary: Retrieve a message response
      description: |
        ## Summary Responses

        Using the links provided in the message response, the user can simply make a new API request to retrieve the summaryStatus URL.

        The request for this information would look as follows:

        `GET /messages/069BF68E5E0FE99B/messagestatus?view=summary`

        This request is asking for a couple of things:

        1.  The URL is specifically asking for all of the **messageresponses** to the message with ID **069BF68E5E0FE99B**

        3.  The **View** parameter is specifying that the message responses should be shown in a **summary** view

        5.  The **Filter** parameter is specifying that the filter should not use a response rule, it should show the **default** filter

        As this is a **GET** request we don’t have to provide any message body.

        This response states that of the 2 people that were sent the message, both of them **Acknowledged** it by sending a response.

        Your application can use this information to easily determine the numbers of recipients in each state and show a small graph.

        ## Detailed Responses
        Using the links provided in the message response, the user can simply make a new API request to retrieve the detailedResponses URL.

        The resulting request would look as follows:

        `GET /messages/069BF68E5E0FE99B/messageresponses?view=detailed&filter=default`

        This request is asking for a couple of things:

        1.  The URL is specifically asking for all of the **messageresponses** to the message with ID `069BF68E5E0FE99B`
        2.  The **View** parameter is specifying that the message responses should be shown in a **detailed** view
        3.  The **Filter** parameter is specifying that the filter should not use a response rule, it should show the **default** filter

        As this is a **GET** request we don’t have to provide any message body.

        **Note**:Searching responses will be described further on in this documentation.

        *   The **responseMessage channel** describes the messaging channel that the response has come in to the Whispir Platform via.

        *   The **responseMessage content** describes the actual content of the inbound message.

        *   The **responseMessage acknowledged** shows the date of when the response was received by the Whispir Platform
      operationId: getMessageResponsesById
      parameters:
        - $ref: '#/components/parameters/X-Api-Key'
        - name: messageId
          in: path
          description: Enter message id
          required: true
          schema:
            type: string
            example: 44F4DA8F04755430BEC5A0E1E2154EBA
        - name: Accept
          in: header
          required: true
          description: Application specific mime-type
          schema:
            type: string
            enum:
              - application/vnd.whispir.messageresponse-v1+json
              - application/vnd.whispir.messageresponse-v1+xml
        - name: Content-Type
          in: header
          required: true
          description: Application specific mime-type
          schema:
            type: string
            enum:
              - application/vnd.whispir.messageresponse-v1+json
              - application/vnd.whispir.messageresponse-v1+xml
        - name: view
          in: query
          required: false
          description: The view for the message response.
          schema:
            type: string
            enum:
              - summary
              - detailed
            default: summary
        - name: filter
          in: query
          description: The filter for the message response.
          required: false
          schema:
            type: string
            enum:
              - noresponse
              - notmatched
              - responserule
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              $ref: '#/components/headers/Message-Response-Content-Type'
            Content-Length:
              $ref: '#/components/headers/Content-Length'
            Access-Control-Allow-Origin:
              $ref: '#/components/headers/Access-Control-Allow-Origin'
          content:
            application/vnd.whispir.message-v1+json:
              schema:
                description: ''
                type: object
                x-examples:
                  example-1:
                    messageresponses:
                      - percentageTotal: 50%
                        responseCount: '1'
                        link: []
                        type: noresponse
                      - percentageTotal: 50%
                        responseCount: '1'
                        link: []
                        type: notmatched
                    link:
                      - uri: 'https://api.au.whispir.com/workspaces/9A4C5521FFC7B15B/messages/747AB7E716C1802B6476784AEB5C9BB8/messageresponses?view=summary'
                        rel: self
                        method: GET
                properties:
                  messageresponses:
                    type: array
                    uniqueItems: false
                    items:
                      oneOf:
                        - properties:
                            percentageTotal:
                              type: string
                              example: 100%
                            responseCount:
                              type: string
                              example: '1'
                            link:
                              type: array
                              items: {}
                            type:
                              type: string
                              enum:
                                - noresponse
                                - notmatched
                          required:
                            - percentageTotal
                            - responseCount
                            - link
                            - type
                        - properties:
                            from:
                              type: object
                              required:
                                - name
                                - mri
                                - mobile
                                - email
                                - voice
                              properties:
                                name:
                                  type: string
                                  example: Test User
                                mri:
                                  type: string
                                  example: testUser.au@User.whispir.com
                                mobile:
                                  type: string
                                  example: '61400400400'
                                email:
                                  type: string
                                  example: tuser@whispir.com
                                voice:
                                  type: string
                                  example: '61400400400'
                            responseCategory:
                              type: string
                              enum:
                                - noresponse
                                - notmatched
                            responseMessage:
                              type: object
                              required:
                                - content
                                - acknowledged
                                - channel
                              properties:
                                content:
                                  type: string
                                  example: N/A
                                acknowledged:
                                  type: string
                                  example: N/A
                                channel:
                                  type: string
                                  example: N/A
                          required:
                            - from
                            - responseCategory
                            - responseMessage
                      description: 'First object if `view` is `summary`, second object if `view` is `detailed`.'
                      type: object
                  link:
                    type: array
                    uniqueItems: true
                    items:
                      type: object
                      properties:
                        uri:
                          type: string
                          example: 'https://api.au.whispir.com/workspaces/9A4C5521FFC7B15B/messages/747AB7E716C1802B6476784AEB5C9BB8/messageresponses'
                        rel:
                          type: string
                          example: self
                        method:
                          type: string
                          example: GET
                        host:
                          type: string
                          example: api.au.whispir.com
                        port:
                          type: number
                          enum:
                            - -1
                      required:
                        - uri
                        - rel
                        - method
                  status:
                    type: string
                    example: '1 to 1 of 1    '
                    description: Present when `view` is `detailed`.
                required:
                  - messageresponses
                  - link
              examples:
                Summary:
                  value:
                    messageresponses:
                      - percentageTotal: 50%
                        responseCount: '1'
                        link: []
                        type: noresponse
                      - percentageTotal: 50%
                        responseCount: '1'
                        link: []
                        type: notmatched
                    link:
                      - uri: 'https://api.au.whispir.com/workspaces/9A4C5521FFC7B15B/messages/747AB7E716C1802B6476784AEB5C9BB8/messageresponses'
                        rel: self
                        method: GET
                        host: api.au.whispir.com
                        port: -1
                Detailed:
                  value:
                    status: '1 to 2 of 2    '
                    messageresponses:
                      - from:
                          name: John Smith
                          mri: John_Smith.484215.Critical_Incident_Management@Contact.whispir.com
                          mobile: '+1000000000'
                          email: jsmith@test.com
                          voice: '+1000000000'
                        responseCategory: noresponse
                        responseMessage:
                          content: N/A
                          acknowledged: N/A
                          channel: N/A
                      - from:
                          name: Fred Smith
                          mri: Fred_Smith.341550.Critical_Incident_Management@Contact.whispir.com
                          mobile: '+1000000000'
                          email: fsmith@test.com
                          voice: '+1000000000'
                        responseCategory: notmatched
                        responseMessage:
                          content: 'OK, got it. Thanks.'
                          acknowledged: '28/09/12 08:48'
                          channel: SMS
                    link: []
      tags:
        - Messages
    parameters:
      - $ref: '#/components/parameters/workspaceId'
  '/workspaces/{workspaceId}/resources':
    post:
      tags:
        - Resources
      summary: Create a resource
      description: |
        ### High-Level Response Elements

        **name:** String  
        *   Specifies the name of the file being uploaded. The extension of the file too is allowed to be present in the name. **Eg:** australia-contacts.csv
        *   **Note:** It is advised that names should not contain spaces or special characters other than `-` and `.`. This helps for easier search and also for a valid URL link (especially) in case of public scoped files.
        *   **Eg:** `australia-contacts.csv` is better name convention than `australia contacts.csv` as the latter converts into `australia%20contacts.csv`.  

        **scope:** String  
        Specifies the permission scope of the file being uploaded. The scope defines the access restriction of the resource. It can be only one between:
          *   **Public -** Public files have an addressable URL and are available publicly
          *   **Private -** Private files have no URL and are only available for bulk messaging purposes and for importing contacts.

        **mimeType:** String  
        The mime type of the file that is being uploaded. The type is dependent on the scope of the resource.
          *   **Public -** Public files can be of any mimetype. text/html; text/csv
          *   **Private -** Private files are restricted to CSV, JSON, and XML

        **derefUri:** The base64 representation of the file being submitted.

        **Note:** When creating a resource, the following conditions apply -

        *   Maximum of 10MB per file being uploaded.
        *   Transactions will have an enforced timeout.
        *   Resources will be available in the Whispir Platform for a limited timeframe (30 days). These will then be automatically cleaned. This will be a configurable setting for Whispir Administrators.

        ### Upload the Resource file via API  
        To upload a file to Whispir’s API, users will make an API call to the /resources endpoint.  
        Applications can use this endpoint to store the source files for dynamic messages. This endpoint can also be used to store any file based data (e.g. images, pdf documents, spreadsheets) for an unlimited amount of time.  

        **Note:** The types of files allowed are - CSV, JSON, XML, Images [JPEG, PNG], and WAV.  

        Information about the resources endpoint is documented in the Resources section of the documentation.
      operationId: postResources
      parameters:
        - $ref: '#/components/parameters/X-Api-Key'
      requestBody:
        content:
          application/vnd.whispir.resource-v1+json:
            schema:
              $ref: '#/components/schemas/resource'
          application/vnd.whispir.resource-v1+xml:
            schema:
              $ref: '#/components/schemas/resource'
        description: resources object that needs to be create resources
        required: true
      responses:
        '201':
          description: Created
          content:
            application/vnd.whispir.resource-v1+json:
              schema:
                $ref: '#/components/schemas/resource'
            application/vnd.whispir.resource-v1+xml:
              schema:
                $ref: '#/components/schemas/resource'
    get:
      tags:
        - Resources
      summary: List resources
      description: |
        Existing resources can be easily retrieved via the GET /resources API call. The response lists all of the existing public and private resources available in the system.

        **name:** String  
        - Specifies the name of the resource. The name is given during creation.

        **scope:** String  
        - Specifies the permission scope of the file being uploaded.

        **mimeType:** String  
        - The mime type of the file that is being uploaded.

        **url:** String  
        - The downloaded link to the resource location. Browsing this link results in a download of the resource.  
        - **Note:** Only available for Public scoped resources.

        **link:** Array  
        - Provides a list of URLs that can be used to manipulate or access the message template.
          - uri - the link to access the message template
          - rel - the descriptor for what the link will do
          - method - the HTTP method to use with this particular link

        ## Filtering search results

        ### Filtering By scope

        Resources can be filtered by their scope. This can be achieved by sending in the required scope type in the URL as query parameter. The scope can be one of the allowed scope types.

        *   Public - &scope=public
        *   Private - &scope=private

        ### Filtering By name

        Resources can be filtered by their name. This can be achieved by sending in the name in the URL as query parameter.

        **Note:** The name including the file extension makes it a unique search.

        **Eg:** - &name=australia.csv
      operationId: getResources
      parameters:
        - $ref: '#/components/parameters/X-Api-Key'
        - name: scope
          description: A filter parameter for the visibility of the resource.
          in: query
          required: false
          schema:
            type: string
            enum:
              - private
              - public
        - name: name
          description: A filter parameter for the name of the resource.
          in: query
          required: false
          schema:
            type: string
            example: recipients.json
      responses:
        '200':
          description: OK
          content:
            examples:
              examples:
                response:
                  value:
                    resources:
                      - name: singapore.csv
                        scope: private
                        mimeType: application/json
                        link:
                          - uri: 'https://api.au.whispir.com/resources/D9A8DC34EDRSD7E4'
                            rel: self
                            method: GET
                      - name: australia.json
                        scope: private
                        mimeType: application/json
                        link:
                          - uri: 'https://api.au.whispir.com/resources/D3E2XCDF3WS4859'
                            rel: self
                            method: GET
                      - name: usa.csv
                        scope: private
                        mimeType: text/csv
                        link:
                          - uri: 'https://api.au.whispir.com/resources/3E2F6E72642F949'
                            rel: self
                            method: GET
                      - name: users.json
                        scope: public
                        mimeType: application/json
                        url: 'https://cdn-ap.whispir.com/public/resources/2163b29d4edf1bd77d71a36210d472360cd.json'
                        link:
                          - uri: 'https://api.au.whispir.com/resources/F1212CF334EDR68'
                            rel: self
                            method: GET
                      - name: whispir-example-bulk-message-1.csv
                        scope: private
                        mimeType: text/csv
                        link:
                          - uri: 'https://api.au.whispir.com/resources/32SDF43ED6829B2'
                            rel: self
                            method: GET
                      - name: whispir-example-bulk-message-2.csv
                        scope: private
                        mimeType: text/csv
                        link:
                          - uri: 'https://api.au.whispir.com/resources/C708D712EDRB0'
                            rel: self
                            method: GET
                      - name: whispir-example-bulk-message-3.csv
                        scope: private
                        mimeType: text/csv
                        link:
                          - uri: 'https://api.au.whispir.com/resources/2FEED897U46E2'
                            rel: self
                            method: GET
                    status: '1 to 7 of 7    '
                    link: []
    parameters:
      - $ref: '#/components/parameters/workspaceId'
  '/workspaces/{workspaceId}/resources/{resourceId}':
    get:
      tags:
        - Resources
      summary: Retrieve a resource
      description: |
        A single resource (public|private) can be retrieved from the available resource by using the resource’s specific link uri
      operationId: getResourcesById
      parameters:
        - $ref: '#/components/parameters/X-Api-Key'
        - name: resourceId
          description: The identifier for the resource.
          in: path
          required: true
          schema:
            type: string
            example: 2C32F4AA38917318D52A279D1946BDE8
      responses:
        '200':
          description: OK
          content:
            examples:
              examples:
                response:
                  value:
                    name: australia.json
                    scope: private
                    mimeType: application/json
                    link:
                      - uri: 'https://api.au.whispir.com/resources/D3E2XCDF3WS4859'
                        rel: self
                        method: GET
                      - uri: 'https://api.au.whispir.com/resources/D3E2XCDF3WS4859'
                        rel: updateResource
                        method: PUT
                        type: 'application/vnd.whispir.resource-v1+json,application/vnd.whispir.resource-v1+xml'
                      - uri: 'https://api.au.whispir.com/resources/D3E2XCDF3WS4859'
                        rel: deleteResource
                        method: DELETE
    put:
      tags:
        - Resources
      summary: Update a resource
      description: |
        Updating a resource involves the same process as in creating a resource. The process of using one of the format (CSV, JSON, XML) for private and any format for public -> converting to base64 encoded data is the same.  
        The change is doing a PUT to the existing resource URL that needs to be updated. Please be careful that doing an update overwrites the previous resource. There is no versioning available in Whispir for the resources.  
        Any or all of the 4 values can be changed. i.e, name, scope, mimeType, derefUri, but all 4 are mandatory values to be sent.  
      operationId: putResourcesById
      parameters:
        - $ref: '#/components/parameters/X-Api-Key'
        - name: resourceId
          in: path
          description: Enter resources id.
          required: true
          schema:
            type: string
            example: 2C32F4AA38917318D52A279D1946BDE8
      requestBody:
        content:
          application/vnd.whispir.resource-v1+json:
            schema:
              $ref: '#/components/schemas/resource'
          application/vnd.whispir.resource-v1+xml:
            schema:
              $ref: '#/components/schemas/resource'
        description: resources object that needs to be update resources
        required: true
      responses:
        '204':
          description: No Content
          content:
            examples:
              examples:
                response:
                  value:
                    title: Emergency Comms - Fire
                    description: Scenario to use during fire evacuation
                    allowedUsers: EVERYONE
                    message:
                      to: '+1000000000'
                      subject: Scenario Emergency Comms - Fire
                      body: Evacuate the building Immediately. Do not use the lifts.
                      label: ''
                      voice: {}
                      from: joe.bloggs.company@Contact.Melbourne.whispir.au
                      social:
                        social:
                          - id: socialType
                            body: text/plain
    delete:
      tags:
        - Resources
      summary: Delete a resource
      description: |
        Resources can be deleted after use. These can be both public and private in scope.  

        **Note:** Deleting a public resource may result in 404 File Not Found error for any sites or material referencing to it. So, ensure that DELETE is only executed when the reference to all material is removed or the content has to be removed for other purposes immediately.
      operationId: deleteResourcesById
      parameters:
        - $ref: '#/components/parameters/X-Api-Key'
        - name: resourceId
          in: path
          description: The id of the resources to be deleted
          required: true
          schema:
            type: string
            example: 2C32F4AA38917318D52A279D1946BDE8
      responses:
        '204':
          description: No Content
        '404':
          description: Not Found
    parameters:
      - $ref: '#/components/parameters/workspaceId'
  '/workspaces/{workspaceId}/templates':
    post:
      tags:
        - Templates
      summary: Create a template
      description: 'Create a message template, combining multi-channel content for use with the Message resource. The message template can be reused across multiple sent messages.'
      operationId: postTemplates
      parameters:
        - $ref: '#/components/parameters/X-Api-Key'
      requestBody:
        content:
          application/vnd.whispir.template-v1+json:
            schema:
              $ref: '#/components/schemas/template'
          application/vnd.whispir.template-v1+xml:
            schema:
              $ref: '#/components/schemas/template'
        description: Templates object that needs to be create Templates
        required: true
      responses:
        '201':
          description: Created
    get:
      tags:
        - Templates
      summary: List templates
      description: |
        ## Response Elements

        **messageTemplateName:** String

        Specifies the name of the message template to be used within message requests.

        **messageTemplateDescription:** String  
        Specifies the description of the message template for others to understand it’s purpose.

        **id:** String  
        Specifies the ID of the template that can be used for message sending.

        **link:** array  
        Provides a list of URLs that can be used to manipulate or access the message template.

        *   uri - the link to access the message template
        *   rel - the descriptor for what the link will do
        *   method - the HTTP method to use with this particular link
      operationId: getTemplates
      parameters:
        - $ref: '#/components/parameters/X-Api-Key'
      responses:
        '200':
          description: OK
          content:
            examples:
              examples:
                response:
                  value:
                    status: '1 to 4 of 4    '
                    messagetemplates:
                      - messageTemplateName: Appointment Reminder
                        messageTemplateDescription: ''
                        id: F0547F6F2E4839F8
                        link:
                          - uri: 'https://api.au.whispir.com/templates/F0547F6F2E4839F8'
                            rel: self
                            method: GET
                      - messageTemplateName: Customer Survey
                        messageTemplateDescription: ''
                        id: DDE10AC13FB0E457
                        link:
                          - uri: 'https://api.au.whispir.com/templates/DDE10AC13FB0E457'
                            rel: self
                            method: GET
                      - messageTemplateName: Service announcement
                        messageTemplateDescription: ''
                        id: 900972D1C916FE84
                        link:
                          - uri: 'https://api.au.whispir.com/templates/900972D1C916FE84'
                            rel: self
                            method: GET
                      - messageTemplateName: Shift Opportunity
                        messageTemplateDescription: ''
                        id: 9CB9BE20B885542D
                        link:
                          - uri: 'https://api.au.whispir.com/templates/9CB9BE20B885542D'
                            rel: self
                            method: GET
                    link: []
    parameters:
      - $ref: '#/components/parameters/workspaceId'
  '/workspaces/{workspaceId}/templates/{templateId}':
    get:
      tags:
        - Templates
      summary: Retrieve a template
      description: Retrieves a Template object.
      operationId: getTemplatesById
      parameters:
        - $ref: '#/components/parameters/X-Api-Key'
        - name: templateId
          in: path
          description: Enter Templates id.
          required: true
          schema:
            type: string
            example: 321D8505157C5F27
      responses:
        '200':
          description: OK
    put:
      tags:
        - Templates
      summary: Update a template
      description: |
        **Note:** Currently users cannot update templates with the same name as a template that already exists in Whispir. Users can overcome this by saving the updated template with a new name, then either changing this back in a subsequent save, or retaining the updated name.
      operationId: putTemplatesById
      parameters:
        - $ref: '#/components/parameters/X-Api-Key'
        - name: templateId
          in: path
          description: Enter Templates id.
          required: true
          schema:
            type: string
            example: 321D8505157C5F27
      requestBody:
        content:
          application/vnd.whispir.template-v1+json:
            schema:
              $ref: '#/components/schemas/template'
          application/vnd.whispir.template-v1+xml:
            schema:
              $ref: '#/components/schemas/template'
        description: Templates object that needs to be update Templates
        required: true
      responses:
        '204':
          description: No Content
    delete:
      tags:
        - Templates
      summary: Delete a template
      description: |
        **Note:** When a template is DELETED, all the associated Scenarios, events, and references of template use in other endpoints will fail. So, ensure that the template is not used anywhere before it is deleted. Whispir **will not** do that check before it deletes the template.
      operationId: deleteTemplatesById
      parameters:
        - $ref: '#/components/parameters/X-Api-Key'
        - name: templateId
          in: path
          description: The id of the Templates to be deleted
          required: true
          schema:
            type: string
            example: 321D8505157C5F27
      responses:
        '204':
          description: No Content
    parameters:
      - $ref: '#/components/parameters/workspaceId'
  '/workspaces/{workspaceId}/responserules':
    post:
      tags:
        - Response Rules
      summary: Create a response rule
      description: |
        ## Response Template Patterns

        Each Response Rule has a series of **Patterns** that allow the creator to specify what textual content should be matched in the response SMS or Email, and a number that should be entered when IVR (Voice) is being used.

        Each Response Rule can specify as many Response Template Patterns as required.

        Each of the Patterns specified will also dynamically create buttons within any Rich Message that is associated with the Response Rule.

        This provides an out of the box capability to quickly gather feedback from the field using a Rich User interface, and leveraging SMS as the delivery mechanism.
      operationId: postResponseRules
      parameters:
        - $ref: '#/components/parameters/X-Api-Key'
      requestBody:
        content:
          application/vnd.whispir.responserule-v1+json:
            schema:
              $ref: '#/components/schemas/responseRule'
          application/vnd.whispir.responserule-v1+xml:
            schema:
              $ref: '#/components/schemas/responseRule'
        description: ''
        required: true
      responses:
        '201':
          description: Created
    get:
      tags:
        - Response Rules
      summary: List response rules
      description: Returns a list of response rules.
      operationId: getResponseRules
      parameters:
        - $ref: '#/components/parameters/X-Api-Key'
      responses:
        '200':
          description: OK
    parameters:
      - $ref: '#/components/parameters/workspaceId'
  '/workspaces/{workspaceId}/responserules/{responseRuleId}':
    get:
      tags:
        - Response Rules
      summary: Retrieve a response rule
      description: Retrieves a response rule object.
      operationId: getResponseRulesById
      parameters:
        - $ref: '#/components/parameters/X-Api-Key'
        - name: responseRuleId
          in: path
          required: true
          description: Response Rule Id
          schema:
            type: string
            example: 64BC5314665B947B
      responses:
        '200':
          description: OK
    put:
      tags:
        - Response Rules
      summary: Update a response rule
      description: Updates a Response Rule object.
      operationId: putResponseRulesById
      parameters:
        - $ref: '#/components/parameters/X-Api-Key'
        - name: responseRuleId
          in: path
          required: true
          description: Response Rule Id
          schema:
            type: string
            example: 64BC5314665B947B
      requestBody:
        content:
          application/vnd.whispir.responserule-v1+json:
            schema:
              $ref: '#/components/schemas/responseRule'
          application/vnd.whispir.responserule-v1+xml:
            schema:
              $ref: '#/components/schemas/responseRule'
        description: Response Rules object used to update Response Rules
        required: true
      responses:
        '204':
          description: No Content
    delete:
      tags:
        - Response Rules
      summary: Delete a response rule
      description: Deletes a Response Rule object.
      operationId: deleteResponseRulesById
      parameters:
        - $ref: '#/components/parameters/X-Api-Key'
        - name: responseRuleId
          in: path
          required: true
          description: Response Rule Id
          schema:
            type: string
            example: 64BC5314665B947B
      responses:
        '204':
          description: No Content
    parameters:
      - $ref: '#/components/parameters/workspaceId'
  '/workspaces/{workspaceId}/contacts':
    post:
      tags:
        - Contacts
      summary: Create a contact
      description: Creates a Contact object. The Contact can be used as a recipient when sending multi-channel messages.
      operationId: postContacts
      parameters:
        - $ref: '#/components/parameters/X-Api-Key'
      requestBody:
        content:
          application/vnd.whispir.contact-v1+json:
            schema:
              $ref: '#/components/schemas/contact'
          application/vnd.whispir.contact-v1+xml:
            schema:
              $ref: '#/components/schemas/contact'
        description: Contact object to be created
        required: true
      responses:
        '201':
          description: Created
          content:
            application/vnd.whispir.contact-v1+json:
              schema:
                $ref: '#/components/schemas/contact'
              examples: {}
            application/vnd.whispir.contact-v1+xml:
              schema:
                $ref: '#/components/schemas/contact'
    get:
      tags:
        - Contacts
      summary: List contacts
      description: |
        **Note:** There is no global search feature available where one can search on all the workspaces present in the system (under allowed user permission). So, When no workspace is provided, the search is performed on the default workspace of the user.

        ### Searching for contacts with Custom Fields

        As Whispir supports extension of the default Contact Profile through the use of Custom Fields. There may be cases where users want to search for Contacts that contain these specific fields. As such, the Whispir API supports searching for contacts using these custom fields.

        Any custom field can be searched by adding the custom_ prepended to the name.

        For example, if the field name is **StaffId**, then the URL would search for:

        `/contacts?custom_StaffId=12345`
      operationId: getContacts
      parameters:
        - $ref: '#/components/parameters/X-Api-Key'
        - name: fieldname
          in: query
          description: |
            String Specifies the field name of the contact object. The field name could be any thing as long as it is a valid contact object.  
            Example: `http://api.whispir.com/contacts?firstName=Sam`
          schema:
            type: string
        - name: sortOrder
          in: query
          description: The order in which you require the results to be returned. Either `asc` or `desc`.
          schema:
            type: string
            enum:
              - asc
              - desc
        - name: sortFields
          in: query
          description: |
            The fields that you require the ordering to be performed on. Multiple fields can be provided, separated by a comma.
            Example: `http://api.whispir.com/contacts?firstName=Sam&sortFields=lastName,jobTitle`
          schema:
            type: string
        - name: customFields
          in: query
          description: Custom Fields
          required: false
          schema:
            type: boolean
      responses:
        '200':
          description: OK
    parameters:
      - $ref: '#/components/parameters/workspaceId'
  '/workspaces/{workspaceId}/contacts/{contactId}':
    get:
      tags:
        - Contacts
      summary: Retrieve a contact
      description: |
        ### Showing Custom Fields

        Whispir supports extension of the default Contact Profile through the use of Custom Fields. Custom fields can support other fields that may be required to be stored on your Contacts, such as Staff ID, Internal Billing Codes, or One Up Manager.

        These custom fields can be configured on any account through a Change Request to Whispir.

        In order to reveal these custom fields on the contact profile, you can use the `customFields=true` flag within your API request.

        Example: `/contacts/AB38CB3EFD38AFDB?customFields=true`
      operationId: getContactsById
      parameters:
        - $ref: '#/components/parameters/X-Api-Key'
        - name: contactId
          in: path
          description: Enter contact id.
          required: true
          schema:
            type: string
            example: 5130D4DDDED0AD4D69D33C3E64419A51
        - name: customFields
          in: query
          description: Custom Fields
          required: false
          schema:
            type: boolean
      responses:
        '200':
          description: OK
    put:
      tags:
        - Contacts
      summary: Update a contact
      description: |
        The application must provide all the fields during the update request, even if they are not being updated.

        ## **NOTE:** Any missing fields will be automatically removed from the existing record.

        **Note:** You cannot selectively update the contact fields needed as this is a PUT request.

        1.  GET `/contact/{id of contact}`
        2.  Update the contact field in the object to the required value
        3.  PUT `/contact/{id of contact}` the new object

        The response to the PUT request upon success is usually a 204 with no content being provided.
      operationId: putContactsById
      parameters:
        - $ref: '#/components/parameters/X-Api-Key'
        - name: contactId
          in: path
          description: Enter contact id.
          required: true
          schema:
            type: string
            example: 5130D4DDDED0AD4D69D33C3E64419A51
      requestBody:
        content:
          application/vnd.whispir.contact-v1+json:
            schema:
              $ref: '#/components/schemas/contact'
          application/vnd.whispir.contact-v1+xml:
            schema:
              $ref: '#/components/schemas/contact'
        description: contact object that needs to be update contact
        required: true
      responses:
        '204':
          description: No Content
    delete:
      tags:
        - Contacts
      summary: Delete a contact
      description: |
        After performing this request, the response does not contain any information other than the headers as it is not necessary.

        The user has requested to delete a contact, and when the response of 204 No Content is returned, the contact is successfully deleted.
      operationId: deleteContactsById
      parameters:
        - $ref: '#/components/parameters/X-Api-Key'
        - name: contactId
          in: path
          description: The id of the contact to be deleted
          required: true
          schema:
            type: string
            example: 5130D4DDDED0AD4D69D33C3E64419A51
      responses:
        '204':
          description: No Content
    parameters:
      - $ref: '#/components/parameters/workspaceId'
  '/workspaces/{workspaceId}/distributionlists':
    post:
      tags:
        - Distribution Lists
      summary: Create a distribution list
      description: |
        Distribution lists can be created within the Default Workspace, or within a Specific Workspace. More information on Workspaces will be provided later in this documentation.

        The MRI value is important here. It is the required unique identifier for any communications that are to be sent out to this distribution list.
      operationId: postDistributionLists
      parameters:
        - $ref: '#/components/parameters/X-Api-Key'
      requestBody:
        content:
          application/vnd.whispir.distributionlist-v1+json:
            schema:
              $ref: '#/components/schemas/distributionlist'
          application/vnd.whispir.distributionlist-v1+xml:
            schema:
              $ref: '#/components/schemas/distributionlist'
        description: Distribution list object that needs to be create Distribution list
        required: true
      responses:
        '201':
          description: Created
          content:
            application/vnd.whispir.distributionlist-v1+json:
              schema:
                $ref: '#/components/schemas/distributionlist'
            application/vnd.whispir.distributionlist-v1+xml:
              schema:
                $ref: '#/components/schemas/distributionlist'
            examples:
              examples:
                response:
                  value:
                    name: My Distribution List
                    description: ''
                    access: Open
                    visibility: Public
                    contactIds: ''
                    userIds: ''
                    distListIds: ''
                    locations:
                      longitude: -122.3493552
                      latitude: 47.6204232
                      type: CurrentLocation
    get:
      tags:
        - Distribution Lists
      summary: List distribution lists
      description: |-
        The distribution list is usually retrieved by its id, but one can also search or refer to the distribution list by its name. This feature has to do with the unique name requirement for the distribution list.

        Apart from the name, the description field can also be used to search for a distribution list. While name can be directly used to send in messages, the description is solely for the purpose of search. Once search yields the required result, the mri has to be picked from the selected DL and then used to send the messages.

        Both these operations can be performed by passing in the relevant search parameters in the URL as query params.
      operationId: getDistributionLists
      parameters:
        - $ref: '#/components/parameters/X-Api-Key'
        - name: name
          in: query
          required: false
          description: Enter unique name
          schema:
            type: string
            example: My Distribution List
        - name: description
          in: query
          required: false
          description: Enter description
          schema:
            type: string
            example: Sample Distribution List
      responses:
        '200':
          description: Ok
          content:
            examples:
              examples:
                response:
                  value:
                    distributionLists:
                      - id: CF5AF1AE49ED07A6
                        name: DL 1
                        mri: dl1.company_name@list.company.whispir.sg
                        description: test distribution list for company
                        memberCount: '4'
                        access: ByApproval
                        visibility: Private
                        link:
                          - uri: 'https://api.au.whispir.com/distributionlists/CF5AF1AE49ED07A6'
                            rel: self
                            method: GET
                      - id: 9FF7C2B470CCEC1E
                        name: Docs Distribution List
                        mri: Docs_Distribution_List.company@list.company.whispir.sg
                        description: A Distribution List created while writing the docs
                        memberCount: '2'
                        access: Open
                        visibility: Public
                        link:
                          - uri: 'https://api.au.whispir.com/distributionlists/9FF7C2B470CCEC1E'
                            rel: self
                            method: GET
                    status: '1 to 2 of 2    '
                    link: []
    parameters:
      - $ref: '#/components/parameters/workspaceId'
  '/workspaces/{workspaceId}/distributionlists/{distributionlistId}':
    get:
      tags:
        - Distribution Lists
      summary: Retrieve a distribution list
      description: |
        A distribution list allows you to associate the following:

        *   **ContactIds** (type:String) is a comma separated list of Contact IDs that you would like added to the list.
        *   **UserIds** (type:String) specifies the Whispir Users that should also be notified when this list is used.
        *   **DistListIds** (type:String) specifies the nested lists that are contained within this distribution list.

        Any or all three of these can be updated via the PUT method along with the DL properties (name, description, location etc).

        The steps usually are:

        1. Create a Distribution List (DL)
        2. While creating the DL itself, you can put in the ContactIds, UserIds, distListIds (nested) so that the DL is created with those values readily placed in.
        3. After the DL is created, if you want to add/update the values, then
        4. Do a GET request to retrieve the specific DL.
           -  This will return you the DL object
        5. Modify the DL properties (name, description, contactIds, UserIds, dlIds, location etc) as needed
        6. Do a PUT request to update the DL details
           -  Successful update gives you a 204 No Content
           -  The contactIds, userIds, distListIds can be passed all together in a single request.

        Note:
        1.  If an existing contactId is again added, it does neither throws an error, nor create two entries. The contactId is just neglected and only 1 record is maintained.
        2.  If the PUT request was successful, the expected response code is a 204 No Content
        3.  For Modifying the Location Information refer to Location Tags for Distribution Lists
      operationId: getDistributionListsById
      parameters:
        - $ref: '#/components/parameters/X-Api-Key'
        - name: distributionlistId
          in: path
          description: Enter Distribution id.
          required: true
          schema:
            type: string
            example: 5EFBA89462693D7B
      responses:
        '200':
          description: OK
    put:
      tags:
        - Distribution Lists
      summary: Update a distribution list
      description: |
        Any or all three of these can be updated via the PUT method along with the DL properties (name, description, location etc).

        The steps usually are:
        1.  Create a Distribution List (DL)
        2.  While creating the DL itself, you can put in the ContactIds, UserIds, distListIds (nested) so that the DL is created with those values readily placed in.
        3.  After the DL is created, if you want to add/update the values, then
        4.  Do a GET request to retrieve the specific DL.
            - This will return you the DL object
        5.  Modify the DL properties (name, description, contactIds, UserIds, dlIds, location etc) as needed
        6.  Do a PUT request to update the DL details
            - Successful update gives you a 204 No Content
            - The contactIds, userIds, distListIds can be passed all together in a single request.

        Note:
        - If an existing contactId is again added, it does neither throws an error, nor create two entries. The contactId is just neglected and only 1 record is maintained.
        - If the PUT request was successful, the expected response code is a 204 No Content
        - For Modifying the Location Information refer to Location Tags for Distribution Lists
      operationId: putDistributionListsById
      parameters:
        - $ref: '#/components/parameters/X-Api-Key'
        - name: distributionlistId
          in: path
          description: Enter Distribution id.
          required: true
          schema:
            type: string
            example: 5EFBA89462693D7B
      requestBody:
        content:
          application/vnd.whispir.distributionlist-v1+json:
            schema:
              $ref: '#/components/schemas/distributionlist'
          application/vnd.whispir.distributionlist-v1+xml:
            schema:
              $ref: '#/components/schemas/distributionlist'
        description: Distribution list object that needs to be update Distribution list
        required: true
      responses:
        '204':
          description: No Content
    delete:
      tags:
        - Distribution Lists
      summary: Delete a distribution list
      description: |
        You can only delete the distribution list that you have created or a valid userId associated with the specific distribution list.
      operationId: deleteDistributionListsById
      parameters:
        - $ref: '#/components/parameters/X-Api-Key'
        - name: distributionlistId
          in: path
          description: The id of the distributionlists to be deleted
          required: true
          schema:
            type: string
            example: 5EFBA89462693D7B
      responses:
        '204':
          description: No Content
    parameters:
      - $ref: '#/components/parameters/workspaceId'
  '/workspaces/{workspaceId}/scenarios':
    post:
      tags:
        - Scenarios
      summary: Create a scenario
      description: |
        A scenario is a combination of a message and contacts. So, its structure contains section for both message as well as contact information. API currently only supports creation of scenario with SMS as communication mode.
      operationId: postScenarios
      parameters:
        - $ref: '#/components/parameters/X-Api-Key'
      requestBody:
        content:
          application/vnd.whispir.scenario-v1+json:
            schema:
              $ref: '#/components/schemas/scenario'
          application/vnd.whispir.scenario-v1+xml:
            schema:
              $ref: '#/components/schemas/scenario'
        description: Scenario list object that needs to be create Scenario
        required: true
      responses:
        '201':
          description: Created
    get:
      tags:
        - Scenarios
      summary: List scenarios
      description: Returns a list of your scenarios.
      operationId: getScenarios
      parameters:
        - $ref: '#/components/parameters/X-Api-Key'
      responses:
        '200':
          description: OK
    parameters:
      - $ref: '#/components/parameters/workspaceId'
  '/workspaces/{workspaceId}/scenarios/{scenarioId}':
    get:
      tags:
        - Scenarios
      summary: Retrieve a scenario
      description: Retrieves a Scenario object.
      operationId: getScenariosById
      parameters:
        - $ref: '#/components/parameters/X-Api-Key'
        - name: scenarioId
          in: path
          description: Enter Scenarios id.
          required: true
          schema:
            type: string
            example: 41048D9483C8CF2A
      responses:
        '200':
          description: OK
          content:
            examples:
              examples:
                response:
                  value:
                    title: Emergency Comms - Fire
                    description: Scenario to use during fire evacuation
                    createdTime: 1437383938000
                    allowedUsers: EVERYONE
                    message:
                      to: '+1000000000'
                      subject: Scenario Emergency Comms - Fire
                      body: sms test
                      label: ''
                      voice: {}
                      from: joe.bloggs.company@Contact.Melbourne.whispir.au
                      social:
                        social:
                          - id: socialType
                            body: text/plain
                      createdTime: 1437569311000
                    link:
                      - uri: 'https://api.au.whispir.com/scenarios/F0547F6F2E4839F8'
                        rel: self
                        method: GET
                      - uri: 'https://api.au.whispir.com/scenarios/F0547F6F2E4839F8'
                        rel: updateScenario
                        method: PUT
                        type: 'application/vnd.whispir.scenario-v1+json,application/vnd.whispir.scenario-v1+xml'
                      - uri: 'https://api.au.whispir.com/scenarios/F0547F6F2E4839F8'
                        rel: deleteScenario
                        method: DELETE
                        type: 'application/vnd.whispir.scenario-v1+json,application/vnd.whispir.scenario-v1+xml'
    post:
      tags:
        - Scenarios
      summary: Run a scenario
      description: |
        Running a scenario triggers the communication to the intended recipients. The message (static or dynamic) will be sent on all the provided channels.

        Running a scenario is very simple to do. The specific scenario has to called via a /POST request.

        Step wise example:
        1. Get all the scenarios
        2. Pick the required scenario’s link attribute
        3. Make a /POST call

        Now invoking this scenario is just making a /POST call. There is no need for a Content-type header as the payload is empty.
      operationId: postScenariosById
      parameters:
        - $ref: '#/components/parameters/X-Api-Key'
        - name: scenarioId
          in: path
          description: Enter Scenarios id.
          required: true
          schema:
            type: string
            example: 41048D9483C8CF2A
      responses:
        '204':
          description: No Content
    put:
      tags:
        - Scenarios
      summary: Update a scenario
      description: Updates a Scenario object.
      operationId: putScenariosById
      parameters:
        - $ref: '#/components/parameters/X-Api-Key'
        - name: scenarioId
          in: path
          description: Enter Scenarios id.
          required: true
          schema:
            type: string
            example: 41048D9483C8CF2A
      requestBody:
        content:
          application/vnd.whispir.scenario-v1+json:
            schema:
              $ref: '#/components/schemas/scenario'
          application/vnd.whispir.scenario-v1+xml:
            schema:
              $ref: '#/components/schemas/scenario'
        description: Scenarios object that needs to be update Scenarios
        required: true
      responses:
        '204':
          description: No Content
    delete:
      tags:
        - Scenarios
      summary: Delete a scenario
      description: Deletes a Scenario object.
      operationId: deleteScenariosById
      parameters:
        - $ref: '#/components/parameters/X-Api-Key'
        - name: scenarioId
          in: path
          description: The id of the Scenarios to be deleted
          required: true
          schema:
            type: string
            example: 41048D9483C8CF2A
      responses:
        '204':
          description: No Content
    parameters:
      - $ref: '#/components/parameters/workspaceId'
  /callbacks:
    post:
      tags:
        - Callbacks
      summary: Create a callback
      description: |-
        Whispir’s callback service can be configured to send simple notifications and some associated metadata via API callbacks to an endpoint of your choice when one of the following events occurs:

        - A message has been replied to
        - A message delivery failure occurred [wrong number or service unavailable]

        > **IMPORTANT**: unlike all the other API endpoints seen so far, Callbacks are not defined at a Workspace level but at a Company level. In other words, they can be referenced from any Workspace of that Company.

        Callbacks are used widely in web applications to transfer information that may become available at some point in the future. These are sometimes referred to as ‘webhooks’.

        The benefits of using API callbacks are:
        - Whispir will instantly notify your callback server when a change has occurred on Whispir platform.
        - You won't need to continuously poll the `/messageresponses` or `/messagestatus` endpoints, so you won't be reducing your API daily cap.
        - Callbacks themselves are on us, so they do not count towards the daily quota limits.
        - Response-based workflows can be built quickly and effectively.

        The following diagram explains the entire high-level process:
        ![API diagram](https://github.com/whispir/openapi/blob/main/assets/images/Whispir_API_diagram.png?raw=true)

        ## Configuration tips

        - Always use a domain name for the callback. Do not use an IP.
        - Ensure that your callback server is reachable on the internet. It should not be localhost or an intranet-only application that can't be reached from the World Wide Web.
        - Limit the port to 80 or 443. Do not use any other ports.
        - Depending on the type chosen (‘json’ or ‘xml’) for the Content-Type, Whispir would make a similar `GET` (and subsequently `POST`) call. Ensure that your web server is configured to handle such MIME types.
        - Most importantly, if your application infrastructure is behind a firewall, make sure that the firewall allows an incoming `POST` request.
      operationId: postCallbacks
      requestBody:
        content:
          application/vnd.whispir.api-callback-v1+json:
            schema:
              $ref: '#/components/schemas/callback'
          application/vnd.whispir.api-callback-v1+xml:
            schema:
              $ref: '#/components/schemas/callback'
        description: Callbacks list object that needs to be create Callbacks
        required: true
      responses:
        '201':
          description: Created
      parameters:
        - $ref: '#/components/parameters/X-Api-Key'
    get:
      tags:
        - Callbacks
      summary: List callbacks
      description: |
        ### Response Elements

        **id:** String  
        The unique ID of the callback within Whispir.

        **name:** String  
        The name given to the Callback at creation time. Also the ID that is used in the `/messages` endpoint.

        **url:** String  
        The application URL that was given to the Callback at creation time. Also the endpoint that will be used when supplying callback information.

        **link:** Array  
        Provides a list of URLs that can be used to manipulate or access the callback.
        *   uri - the link to access the specific callback
        *   rel - the descriptor for what the link will do
        *   method - the HTTP method to use with this particular link
      operationId: getCallbacks
      responses:
        '200':
          description: OK
          content:
            examples:
              examples:
                response:
                  value:
                    status: 1 to 3 of 3
                    callbacks:
                      - id: BCD374DABC73649B
                        name: Sample Callback 1
                        url: 'http://myserver.com/callback1.php'
                        link:
                          - uri: 'https://api.au.whispir.com/callbacks/BCD374DABC73649B'
                            rel: self
                            method: GET
                      - id: AD34DBCEFD74EABC
                        name: Sample Callback 2
                        url: 'http://myserver.com/callback2.php'
                        link:
                          - uri: 'https://api.au.whispir.com/callbacks/AD34DBCEFD74EABC'
                            rel: self
                            method: GET
                      - id: 73BDCEFA43DF35DB
                        name: Sample Callback 3
                        url: 'http://myserver.com/callback3.php'
                        link:
                          - uri: 'https://api.au.whispir.com/callbacks/73BDCEFA43DF35DB'
                            rel: self
                            method: GET
                    link: []
      parameters:
        - $ref: '#/components/parameters/X-Api-Key'
  '/callbacks/{callbackId}/calls':
    get:
      tags:
        - Callbacks
      summary: List callback calls
      description: |
        ## Callback Retries

        The retriesEnabled flag can be enabled on a callback to ensure that Whispir automatically attempts to retry in the event of a failure occurring.

        When a failure conditions occurs, Whispir will mark the callback server as down and log the attempted callback as Failed.

        This callback will be attempted to be retried after ~5 minutes. If the server is available, the callbacks will automatically be processed through the server, the user doesn’t need to take any further action.

        The following rules apply to Whispir’s automated retries for callbacks:
        *   When a failure to make a callback occurs, Whispir will begin retries ~every 5 minutes.
        *   Whispir will retry any callback for up to 24h.
        *   After 24h, the callbacks will no longer be retried.
        *   If the callback service becomes available prior to 24h, the callbacks will automatically re-process.
        *   If the callback service takes longer than 24h, the user can access the callback information from the /callbacks/:id/calls endpoint.

        An array of calls will be returned to you in the HTTP response body.

        ### Retrieving the list of calls based on their Status
        To retrieve a list of attempted API calls from the Whispir API you can execute an HTTP GET using the /calls endpoint on a specific callback.

        To specifically retrieve the FAILED/SUCCESS calls, one can pass a status query param in the URL.
      operationId: getCallbacksCallsById
      parameters:
        - $ref: '#/components/parameters/X-Api-Key'
        - name: callbackId
          in: path
          required: true
          description: Enter Callbacks Id
          schema:
            type: string
            example: F98A1DD47C3CA1F5
        - name: status
          in: query
          required: false
          description: 'To specifically retrieve the FAILED/SUCCESS calls, one can pass a status query param in the URL.'
          schema:
            type: string
            enum:
              - SUCCESS
              - FAILED
      responses:
        '200':
          description: OK
          content:
            examples:
              examples:
                response:
                  value:
                    status: 1 to 1 of 1
                    calls:
                      - id: B3EDFE83DF389DFE
                        messageId: ABC4857BCCF484575FCA
                        messageLocation: 'https://api.au.whispir.com/messages/ABC4857BCCF484575FCA'
                        status: FAILED
                        from:
                          name: Fred Waters
                          mri: Fred_Waters.528798.Sandbox@Contact.whispir.com
                          mobile: '+1000000000'
                          email: ''
                          voice: ''
                        responseMessage:
                          channel: SMS
                          acknowledged: '09/01/13 13:22'
                          content: 'Yes, I accept. Will I need to bring steel cap boots?'
                        callback:
                          id: B384FD38DCBADE38
                          name: My Callback Server
                          url: 'https://www.myapplication.com/myapp'
                          attemptedDate: '09/01/13 13:22'
                          statusCode: 500
                          statusMessage: Internal Server Error
                        link:
                          - rel: updateCall
                            uri: /callbacks/B384FD38DCBADE38/calls/B3EDFE83DF389DFE
                            method: PUT
                    link:
                      - rel: next
                        uri: /callbacks/B384FD38DCBADE38/calls?limit=20&offset=20
                        method: GET
    put:
      tags:
        - Callbacks
      summary: Update a callback call
      description: |
        As every call to a callback endpoint is now stored within the calls endpoint, it’s possible that when failed calls are successfully processed through a manual exercise, that these calls will then need to be updated to reflect the current status.

        Take the following example:
        1.  Callback server becomes unavailable
        2.  A message is sent via Whispir with callbacks enabled.
        3.  The Message gets a response, and this triggers the callback
        4.  The callback server is unavailable, so the response is stored with a status of 'FAILED’
        5.  After 24h, the callback server becomes available again. Retries have stopped, so this information will not automatically flow into the callback server.
        6.  The customer writes a script to GET all of the calls stored in the /calls endpoint and process them.
        7.  Once successfully processed, the customer’s script should update the contents of the /calls endpoint to reflect the current status of 'SUCCESS’.

        This process can be facilitated with the use of a PUT request to the /calls endpoint in Whispir.

        To update a list of attempted API calls from the Whispir API you can execute an HTTP PUT using the /calls endpoint on a specific callback.

        Users can specify multiple IDs to be updated using the following notation:

        `/callbacks/:id/calls?id=ID1&id=ID2&id=ID3...`

        This ensures that all callbacks that have been processed can be updated in a single API call, rather than having to make a single API call per callback attempt.

        The PUT request takes a single API parameter in the body
      operationId: putCallbacksCallsById
      parameters:
        - $ref: '#/components/parameters/X-Api-Key'
        - name: callbackId
          in: path
          description: Enter Scenarios id.
          required: true
          schema:
            type: string
            example: 41048D9483C8CF2A
        - name: status
          in: query
          required: true
          description: The status to update the attempted calls
          schema:
            type: string
            enum:
              - SUCCESS
              - FAILED
      responses:
        '204':
          description: No Content
  /workspaces:
    post:
      tags:
        - Workspaces
      summary: Create a workspace
      description: |
        Note: There is no limit to the amount of workspaces each API user can create.
      operationId: postWorkspaces
      requestBody:
        content:
          application/vnd.whispir.workspace-v1+json:
            schema:
              $ref: '#/components/schemas/workspace'
          application/vnd.whispir.workspace-v1+xml:
            schema:
              $ref: '#/components/schemas/workspace'
        description: Workspaces list object that needs to be create Workspaces
        required: true
      responses:
        '201':
          description: Created
      parameters:
        - $ref: '#/components/parameters/X-Api-Key'
    get:
      tags:
        - Workspaces
      summary: List workspaces
      description: Returns a list of your workspaces.
      operationId: getWorkspaces
      responses:
        '200':
          description: OK
          content:
            examples:
              examples:
                response:
                  value:
                    workspaces:
                      - projectName: Sales Lead Notifications
                        projectNumber: ''
                        status: A
                        billingcostcentre: '0'
                        link:
                          - uri: 'https://api.au.whispir.com/workspaces/7311ABEB701E7C60'
                            rel: self
                            method: GET
                      - projectName: Product Release Management
                        projectNumber: ''
                        status: A
                        billingcostcentre: '0'
                        link:
                          - uri: 'https://api.au.whispir.com/workspaces/26B1A09C1FEC20A2'
                            rel: self
                            method: GET
                      - projectName: Business Working Group
                        projectNumber: ''
                        status: A
                        billingcostcentre: CLSA
                        link:
                          - uri: 'https://api.au.whispir.com/workspaces/A358845BF004C113'
                            rel: self
                            method: GET
                      - projectName: Critical Incident Management
                        projectNumber: ''
                        status: A
                        billingcostcentre: ''
                        link:
                          - uri: 'https://api.au.whispir.com/workspaces/B7BFEF555F0F7F81'
                            rel: self
                            method: GET
      parameters:
        - $ref: '#/components/parameters/X-Api-Key'
  '/workspaces/{workspaceId}':
    get:
      tags:
        - Workspaces
      summary: Retrieve a workspace
      description: 'Use GET on a Workspace Id to verify it is a valid Workspace ID, and see a list of all the other endpoint URIs in that workspace'
      operationId: getWorkspacesById
      parameters:
        - $ref: '#/components/parameters/X-Api-Key'
      responses:
        '200':
          description: OK
    parameters:
      - $ref: '#/components/parameters/workspaceId'
  /activities:
    post:
      tags:
        - Activities
      summary: Create an activity
      description: |
        Note: There is no limit to the amount of activities that can be created.
      operationId: postActivities
      requestBody:
        content:
          application/vnd.whispir.activity-v1+json:
            schema:
              $ref: '#/components/schemas/activity'
          application/vnd.whispir.activity-v1+xml:
            schema:
              $ref: '#/components/schemas/activity'
        description: activity list object that needs to be create activity
        required: true
      responses:
        '201':
          description: Created
      parameters:
        - $ref: '#/components/parameters/X-Api-Key'
    get:
      tags:
        - Activities
      summary: List activities
      description: |
        ### Search or Filter on Activity Logs
        Activity logs can become quickly huge owing to the amount of actions performed. In such cases, to have a proper filtering of data during a GET /activities, Whispir API provides very neat filtering options on the data.

        All filter options are to be passed in as URL query parameters.

        **Note:** The API currently results in a 404 Not Found when there are no activities present in the log for a given search criteria. This should not be not confused with a failed response. But rather as No Data Found.
      operationId: getActivities
      parameters:
        - $ref: '#/components/parameters/X-Api-Key'
        - name: action
          in: query
          required: false
          description: /activities?action=Map
          schema:
            type: string
            enum:
              - Create
              - Update
              - Move
              - Copy
              - Draft
              - Send
              - Modified
              - Delete
              - Contact Import File
              - Login
              - Approve
              - Reject
              - Dispatch
              - Register
              - Accept
              - Closed
              - Map
              - Un-map
        - name: module
          in: query
          required: false
          description: /activities?module=Message
          schema:
            type: string
            enum:
              - System
              - Message
              - Scheduled Message
              - User
              - Contact
              - DistributionList
              - Template
              - Workspace
              - Event
              - WebService
              - Settings
              - Conversation
              - Gateway
              - Workspace Mapping
              - Folders
              - Team
              - RSS
              - API Mapping
              - Asset
              - Instruction
        - name: user
          in: query
          required: false
          description: /activities?user=james
          schema:
            type: string
            example: james
        - name: workspace
          in: query
          required: false
          description: /activities?workspace=Whispir.
          schema:
            type: string
            default: '{{workspaceName}}'
        - name: status
          in: query
          required: false
          description: /activities?status=Successful
          schema:
            type: string
            enum:
              - Successful
              - Failed
              - Rejected
        - name: description
          in: query
          required: false
          description: /activities?description=Imported
          schema:
            type: string
            example: Sample Activity
        - name: Start time
          in: query
          required: false
          description: 'The date and time to start searching from in the format:dd/mm/yyyy hh:mm. This will search on the `time` field <p>/activities?startTime=01/01/2015%2000:00</p>'
          schema:
            type: string
            default: '{{startTime}}'
        - name: End time
          in: query
          required: false
          description: 'The date and time to start searching from in the format:dd/mm/yyyy hh:mm <p>/activities?endTime=01/01/2015%2000:00</p>'
          schema:
            type: string
            default: '{{endTime}}'
      responses:
        '200':
          description: OK
          content:
            examples:
              examples:
                response:
                  value:
                    activities:
                      - user: james.cameron
                        time: '17/08/15 13:29'
                        action: Send
                        description: Message sent via the Whispir's Java library
                        status: Successful
                        module: Message
                        workspaceName: Whispir
                        link:
                          - uri: 'https://api.au.whispir.com/activities/9B26BCE6A7C1997D3E3C04D4C0B62165'
                            rel: self
                            method: GET
                      - user: james.cameron
                        time: '17/08/15 12:56'
                        action: Create
                        status: Successful
                        module: Workspace
                        workspaceName: Whispir
                        link:
                          - uri: 'https://api.au.whispir.com/activities/CF8F388F18FDDA7CA40F42E888EC8E67'
                            rel: self
                            method: GET
                      - user: james.cameron
                        time: '17/08/15 12:26'
                        action: Draft
                        description: Template for default notification messages
                        status: Successful
                        module: Template
                        workspaceName: Whispir
                        link:
                          - uri: 'https://api.au.whispir.com/activities/19F603F21E8A7D536D577A6B4DBCFE3F'
                            rel: self
                            method: GET
                      - user: markm
                        time: '22/12/14 11:37'
                        action: Logout
                        description: Loged out
                        status: Successful
                        module: System
                        workspaceName: ABC Operations
                        link:
                          - uri: 'https://api.au.whispir.com/activities/0DEB48AB3D3B6069D7DA1A808F5A5DE4'
                            rel: self
                            method: GET
                      - user: markm
                        time: '22/12/14 11:20'
                        action: Login
                        description: 'Logged in, IP:8.8.8.8, Country: USA'
                        status: Successful
                        module: System
                        workspaceName: ABC Operations
                        link:
                          - uri: 'https://api.au.whispir.com/activities/0CEC8009230B3B92F5B548A22B55C407'
                            rel: self
                            method: GET
                    link: []
        '404':
          description: Not Found
  '/workspaces/{workspaceId}/activities':
    get:
      tags:
        - Activities
      summary: List workspace activities
      description: |
        ## Restricting to only a single workspace 
        By default, GET /activities returns all the activities at company level. This covers all the workspaces. So, if the items has to limited to a specific workspace, one has to use the workspace as the endpoint and activities followed by it.
      operationId: getWorkspaceActivities
      parameters:
        - $ref: '#/components/parameters/X-Api-Key'
      responses:
        '200':
          description: OK
    parameters:
      - $ref: '#/components/parameters/workspaceId'
  '/workspaces/{workspaceId}/customlists':
    get:
      tags:
        - Custom Lists
      summary: List custom lists
      description: |
        ### High-Level Response Elements
        **id:** Number  
        Specifies the unique id of the List.

        **name:** String  
        Specifies the name of the List.

        **type:** String  
        Specifies the type. The type can be one of:
        *   INCIDENT
        *   MESSAGE
        *   CONTACT
        *   RSS

        **sorttype:** String  
        Specifies the sorting order. The order can be one of:
        *   As Displayed
        *   Ascending
        *   Descending

        **linked:** String  
        Specifies the linked status. Linked list item values are dependent on other lists. The linked can be one of:
        *   disabled
        *   list id to which this is linked with

        **link:** Array  
        Provides a list of URLs that can be used to manipulate or access the list.

        *   uri - the link to access the list
        *   rel - the descriptor for what the link will do
        *   method - the HTTP method to use with this particular link

        ### Search or Filter on Custom Lists

        API allows you to be able to query the GET /customlists endpoint using the following filters.

        **Search Criteria**
        - **name:** `/customlists?name=Category`

        - **type:** `/customlists?type=Message`

        ***
        **Note:** The API currently results in a 404 Not Found when there are no activities present in the log for a given search criteria. This should not be not confused with a failed response. But rather as No Data Found.
      operationId: getCustomLists
      parameters:
        - $ref: '#/components/parameters/X-Api-Key'
        - name: name
          in: query
          required: false
          description: Enter search name Eg.Category
          schema:
            type: string
            example: Category
        - name: type
          in: query
          required: false
          description: Enter search type Eg.Message
          schema:
            type: string
            enum:
              - INCIDENT
              - MESSAGE
              - CONTACT
              - RSS
      responses:
        '200':
          description: OK
          content:
            examples:
              examples:
                response:
                  value:
                    status: 1 to 5 of 5
                    customlabels:
                      - id: 4E2101D0E5D16229
                        name: Category
                        type: INCIDENT
                        createdDate: '02/08/11 14:20'
                        sortType: As Displayed
                        linked: disabled
                        link:
                          - uri: 'https://api.au.whispir.com/customlists/40E5D16229E2101D'
                            rel: self
                            method: GET
                      - id: 0CA7B9E2B21A3B1A
                        name: Day of Month
                        type: MESSAGE
                        createdDate: '13/10/14 16:30'
                        sortType: As Displayed
                        linked: disabled
                        link:
                          - uri: 'https://api.au.whispir.com/customlists/0CA7B9E2B21A3B1A'
                            rel: self
                            method: GET
                      - id: 87F23964C25ECF22
                        name: Day of Week
                        type: MESSAGE
                        createdDate: '07/01/14 09:51'
                        sortType: As Displayed
                        linked: disabled
                        link:
                          - uri: 'https://api.au.whispir.com/customlists/87F23964C25ECF22'
                            rel: self
                            method: GET
                      - id: F0771B97F1EF770B
                        name: External Vendor
                        type: INCIDENT
                        createdDate: '02/08/11 14:20'
                        sortType: As Displayed
                        linked: disabled
                        link:
                          - uri: 'https://api.au.whispir.com/customlists/F0771B97F1EF770B'
                            rel: self
                            method: GET
                      - id: 768E4ACA5DA7500C
                        name: Finish Time
                        type: MESSAGE
                        createdDate: '01/08/11 12:38'
                        sortType: As Displayed
                        linked: disabled
                        link:
                          - uri: 'https://api.au.whispir.com/customlists/768E4ACA5DA7500C'
                            rel: self
                            method: GET
                    link: []
        '404':
          description: Not Found
    parameters:
      - $ref: '#/components/parameters/workspaceId'
  '/workspaces/{workspaceId}/customlists/{customlistId}':
    get:
      tags:
        - Custom Lists
      summary: Retrieve a custom list
      description: |
        ### High-Level Response Elements

        **id:** Number  
        Specifies the unique id of the List.

        **name:** String  
        Specifies the name of the List.

        **type:** String  
        Specifies the type. The type can be one of:
        *   INCIDENT
        *   MESSAGE
        *   CONTACT
        *   RSS

        **createdDate:** String  
        Specifies the date of the List creation.

        **sorttype:** String  
        Specifies the sorting order. The order can be one of:
        *   As Displayed
        *   Ascending
        *   Descending

        **linked:** String  
        Specifies the linked status. Linked list item values are dependent on other lists. The linked can be one of:
        *   disabled
        *   list id to which this is linked with

        **customlabellists:** Object  
        The `name` is the text that is shown to the user, where as the `value` is the internally passed in value.

        **link:** Array  
        Provides a list of URLs that can be used to manipulate or access the list.
        *   uri - the link to access the list
        *   rel - the descriptor for what the link will do
        *   method - the HTTP method to use with this particular link
      operationId: getCustomListsById
      parameters:
        - $ref: '#/components/parameters/X-Api-Key'
        - name: customlistId
          in: path
          required: true
          description: Enter Id
          schema:
            type: string
            example: 43E9046401B18269
      responses:
        '200':
          description: OK
          content:
            examples:
              examples:
                response:
                  value:
                    id: 4E2101D0E5D16229
                    name: Category
                    type: INCIDENT
                    createdDate: '02/08/11 14:20'
                    sortType: As Displayed
                    linked: disabled
                    customlabellists:
                      - name: Internal Systems
                        value: Internal Systems
                      - name: External Systems
                        value: External Systems
                      - name: Infrastructure
                        value: Infrastructure
                    link:
                      - uri: 'https://api.au.whispir.com/customlists/40E5D16229E2101D'
                        rel: self
                        method: GET
        '404':
          description: Not Found
    parameters:
      - $ref: '#/components/parameters/workspaceId'
  /users:
    post:
      tags:
        - Users
      summary: Create a user
      description: |-
        Create a new user. Ensure that the necessary permissions are provided to the API account to create or modify user accounts.

        ### Activating a User after the creation

        When created new users are in the PENDING (P) state. To Activate the user, the User must be set to INACTIVE first via a PUT request and then finally set to ACTIVE (A) via another PUT. They cannot be directly set to (A) from (P).

        An user when created is assigned the PENDING status. So, to set the user to ACTIVE, one has to follow the “user state machine” rules. Here’s how we do it:
        1.  POST /users for user account creation. Capture the Location header value which is the unique link to the User record. This is used in Step 2
        2.  GET /users/{userId} for the user object
        3.  PUT /users/{userId} with STATUS set to 'INACTIVE’ - using the user object retreived in step 2
        4.  PUT /users/{userId} with STATUS set to 'ACTIVE’ - using the user object retreived in step 2

        **Note:** The status text is case sensitive. Lowercase or mixed case text is invalid. Always use uppercase.

        Example: active != ACTIVE; inActive != INACTIVE
      operationId: postUsers
      parameters:
        - $ref: '#/components/parameters/X-Api-Key'
      requestBody:
        content:
          application/vnd.whispir.user-v1+json:
            schema:
              $ref: '#/components/schemas/user'
          application/vnd.whispir.user-v1+xml:
            schema:
              $ref: '#/components/schemas/user'
        description: Users list object that needs to be create Users
        required: true
      responses:
        '201':
          description: Created
          content:
            examples:
              examples:
                response:
                  value:
                    userName: John.Wick
                    password: ''
                    status: PENDING
                    firstName: John
                    lastName: Wick
                    personalEmailAddress2: ''
                    personalCountry: Australia
                    workEmailAddress1: jwick@testcompany.com
                    workMobilePhone1: '61423456789'
                    workCountry: Australia
                    workPostalCountry: Australia
                    timezone: Australia/Melbourne
                    link:
                      - uri: 'https://api.au.whispir.com/users/AF48A9EC3F02E43C'
                        rel: self
                        method: GET
                      - uri: 'https://api.au.whispir.com/users/AF48A9EC3F02E43C'
                        rel: updateUser
                        method: PUT
                        type: 'application/vnd.whispir.user-v1+xml,application/vnd.whispir.user-v1+json'
                      - uri: 'https://api.au.whispir.com/users/AF48A9EC3F02E43C'
                        rel: deleteUser
                        method: DELETE
    get:
      tags:
        - Users
      summary: List users
      description: |
        Retrieve a list of users in the account. The result will only be limited to users with ACTIVE status. User’s with other status will not be listed in the results.

        Once the request is placed, the response will be a list of url’s to each of the users that the API user has access to/or has requested for via the search criteria.

        **Note:** The sample request here shows users from the company the existing API user is associated with. You cannot retrieve users list from outside of your company and users with status != ACTIVE.

        ## Retrieving workspace users
        To retrieve the list of users, the request is made to via GET to `/workspaces/{workspaceId}/users` endpoint.

        By default there will be a limit of 20 users returned in a request.

        The user will use the limit and offset query parameters to determine how many users they would like to receive. (default when not provided will be limit=20 & offset=0)

        ### Searching for users
        Users can be searched for in a given company by passing in valid search criteria. The search criteria usually can be any of the following user elements (field names) and will be sent in as part of the URI as query parameters.
        *   First Name
        *   Last Name
        *   Title
        *   Job Title
        *   Country
        *   Timezone
        *   Organization Name
        *   Division
        *   Business Unit
        *   Department
        *   Team Name
        *   Role
        *   Additional Team Name
        *   Additional Role
        *   Work Email Address 1
        *   Work Mobile Phone 1
        *   Work Phone Area Code 1
        *   Work Phone 1
        *   Status * (see note below)

        **Note:** While searching for users via status, use the short code ‘A’ for ACTIVE, similarly, 'I’ for INACTIVE, rather than the full words ACTIVE, INACTIVE, etc. so, it is &status=A not &status=ACTIVE.
      operationId: getUsers
      parameters:
        - $ref: '#/components/parameters/X-Api-Key'
        - name: fieldname
          description: A filter on the User attributes. Only Users with matching attributes will be returned.
          in: query
          required: false
          schema:
            type: string
        - name: sortOrder
          in: query
          description: The order in which you require the results to be returned. Either `asc` or `desc`.
          required: false
          schema:
            type: string
            enum:
              - asc
              - desc
        - name: sortFields
          in: query
          description: 'The fields that you require the ordering to be performed on. Multiple fields can be provided, separated by a comma.'
          required: false
          schema:
            type: string
            example: 'lastName,jobTitle'
      responses:
        '200':
          description: OK
          content:
            examples:
              examples:
                response:
                  value:
                    status: 1 to 1 of 1
                    Users:
                      - id: AF48A9EC3F02E43C
                        firstName: Fred
                        lastName: Smith
                        companyName: Whispir Pte Ltd
                        workEmailAddress1: fsmith@testcompany.com
                        workMobilePhone1: '61423456789'
                        link:
                          method: GET
                          rel: self
                          uri: 'http://api.whispir.com/users/AF48A9EC3F02E43C'
                      - ...
      x-internal: false
    delete:
      tags:
        - Users
      summary: Delete all users
      description: |-
        Delete all users in the company.

        **Note**: use this endpoint with caution!
      operationId: deleteUsers
      parameters:
        - $ref: '#/components/parameters/X-Api-Key'
      responses:
        '204':
          description: No Content
  '/users/{userId}':
    get:
      tags:
        - Users
      summary: Retrieve a user
      description: Retrieves a User object.
      operationId: getUsersById
      parameters:
        - $ref: '#/components/parameters/X-Api-Key'
        - name: userId
          description: The identifier for the User.
          in: path
          required: true
          schema:
            type: string
            example: 4821DCC420494A3A
      responses:
        '200':
          description: OK
          content:
            examples:
              examples:
                response:
                  value:
                    id: AF48A9EC3F02E43C
                    firstName: Fred
                    lastName: Smith
                    status: ACTIVE
                    link:
                      method: GET
                      rel: self
                      uri: 'http://api.whispir.com/users/AF48A9EC3F02E43C'
    put:
      tags:
        - Users
      summary: Update a user
      description: |
        The application must provide all the fields during the update request, even if they are not being updated.

        **Any missing fields, except for the password field, will be automatically removed from the existing record.**

        **Note:** You cannot selectively update the user fields needed as this is a PUT request.

        So the standard process for updating a user record is:

        1.  GET `/users/{id of user}`
        2.  Update the user field in the object to the required value
        3.  PUT `/users/{id of user}` the new object

        The response to the PUT request upon success is usually a 204 with no content being provided.
      operationId: putUsersById
      parameters:
        - $ref: '#/components/parameters/X-Api-Key'
        - name: userId
          in: path
          description: Enter Users id.
          required: true
          schema:
            type: string
            example: 4821DCC420494A3A
      requestBody:
        content:
          application/vnd.whispir.user-v1+json:
            schema:
              $ref: '#/components/schemas/user'
          application/vnd.whispir.user-v1+xml:
            schema:
              $ref: '#/components/schemas/user'
        description: Users object that needs to be update Users
        required: true
      responses:
        '204':
          description: Created
    delete:
      tags:
        - Users
      summary: Delete a user
      description: |
        After performing this request, the response does not contain any information other than the headers as it is not necessary.

        The delete a user if successful shall respond with a 204 No Content.
      operationId: deleteUsersById
      parameters:
        - $ref: '#/components/parameters/X-Api-Key'
        - name: userId
          in: path
          description: Enter User id
          required: true
          schema:
            type: string
            example: 4821DCC420494A3A
      responses:
        '204':
          description: No Content
  '/workspaces/{workspaceId}/users':
    get:
      tags:
        - Users
      summary: List workspace users
      description: Returns a list of your Users.
      operationId: getWorkspaceUsers
      parameters:
        - $ref: '#/components/parameters/X-Api-Key'
      responses:
        '200':
          description: OK
          content:
            examples:
              examples:
                response:
                  value:
                    users:
                      - id: AF48A9EC3F02E43C
                        firstName: Fred
                        lastName: Smith
                        companyName: Whispir Pte Ltd
                        workEmailAddress1: fsmith@whispir.com
                        workMobilePhone1: 6512348765
                        link:
                          - uri: 'https://api.au.whispir.com/workspaces/C727BCE3A813E2B1/users/AF48A9EC3F02E43C'
                            rel: self
                            method: GET
                      - id: DFC878BCB2EF9258
                        firstName: John
                        lastName: Wick
                        companyName: ''
                        workEmailAddress1: jwick@whispir.com
                        link:
                          - uri: 'https://api.au.whispir.com/workspaces/C727BCE3A813E2B1/users/DFC878BCB2EF9258'
                            rel: self
                            method: GET
                      - status: 1 to 20 of 28
                        link:
                          uri: 'https://api.au.whispir.com/workspaces/C727BCE3A813E2B1/users/?offset=10&limit=10'
                          rel: next
                          method: GET
    parameters:
      - $ref: '#/components/parameters/workspaceId'
  '/workspaces/{workspaceId}/events':
    get:
      tags:
        - Events
      summary: Retrieve an event
      description: Retrieves an Event object.
      operationId: getEvents
      parameters:
        - $ref: '#/components/parameters/X-Api-Key'
      responses:
        '200':
          description: OK
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/event'
            application/json:
              schema:
                $ref: '#/components/schemas/event'
    post:
      tags:
        - Events
      summary: Create an event
      description: |
        As Whispir works with each organisation to build out the requirements of the events module, the required fields are minimal. The bulk of the event information is from fields that are generic, and only applicable to the customer that is using the module.

        Events have sub sections under them called as ‘actions’ (maximum of 10). When an Event occurs/is triggered, the related actions are to be performed. Each action has an owner, a set time, and details associated with it. The owner or responsible person for the event could be a /contacts in the system. This ensures that proper communication is sent to the individual based on their preferred channel (message, email, voice) automatically without having to key in the phone, email, and other communication information again.

        The Events module captures information specific to an event so the information can be used in as part of messaging for the duration of the event. The Events module can be customized to accept events and associated information from external systems or to capture more complex information around an event.

        Events are created within a workspace. As they are custom built the information to be captured will depend on your organisations specific requirements. Generally at a minimum an event will have a label, start date, and a status.

        Most importantly, to create an event, one must have the create access for Incident row in the Roles & Permission section of the account settings.
      operationId: postEvents
      parameters:
        - $ref: '#/components/parameters/X-Api-Key'
      requestBody:
        $ref: '#/components/requestBodies/event'
      responses:
        '201':
          description: Created
          content:
            examples:
              examples:
                response:
                  value:
                    id: 421FEEBA93GF53A2
                    eventLabel: 2701095 - Outage of Local Systems in Sydney
                    status: Active
                    eventFormList:
                      - formName: MetroEvent
                        eventFieldList:
                          - name: summary
                            value: Outage of systems in Sydney
                          - name: location
                            value: '0.0,0.0'
                          - name: endDate
                          - name: type
                            value: ''
                          - name: actionDetails2
                            value: ''
                          - name: actionDetails3
                            value: ''
                          - name: actionDetails1
                            value: investigation to take place asap.
                          - name: priority
                            value: ''
                          - name: description
                            value: 'ATMs are non responsive, teams to be sent to investigate.'
                          - name: actionDetails8
                            value: ''
                          - name: actionDetails9
                            value: ''
                          - name: actionDetails6
                            value: ''
                          - name: actionDetails7
                            value: ''
                          - name: actionDetails4
                            value: ''
                          - name: actionOwner10
                            value: ''
                          - name: actionDetails5
                            value: ''
                          - name: platform
                            value: ''
                          - name: services
                            value: ''
                          - name: status
                            value: Open
                          - name: openedBy
                            value: ''
                          - name: category
                            value: Internal
                          - name: externalVendor
                            value: ''
                          - name: externalCaseNumber
                            value: ''
                          - name: actionOwner6
                            value: ''
                          - name: startDate
                            value: '11/09/2015 00:00:00'
                          - name: actionOwner5
                            value: ''
                          - name: actionOwner8
                            value: ''
                          - name: actionOwner7
                            value: ''
                          - name: actionOwner9
                            value: ''
                          - name: actionDate8
                          - name: actionDate9
                          - name: actionDetails10
                            value: ''
                          - name: actionDate4
                          - name: actionOwner2
                            value: ''
                          - name: actionDate5
                          - name: actionOwner1
                            value: John Wick
                          - name: actionDate6
                          - name: actionOwner4
                            value: ''
                          - name: actionDate7
                          - name: actionOwner3
                            value: ''
                          - name: actionDate1
                            value: '11/09/2015 00:00:00'
                          - name: actionDate3
                          - name: actionDate2
                          - name: locations
                            value: ''
                          - name: impactToOrg
                            value: ''
                          - name: actionDate10
                          - name: locationDisplay
                            value: ''
                          - name: subCategory
                            value: ''
                          - name: severity
                            value: Severity 3 - Minor Outage (Some Service Degradation)
                          - name: duration
                            value: ''
                          - name: lineNumber
                            value: ''
                          - name: impactCondition
                            value: ''
                    link:
                      - uri: 'https://api.au.whispir.com/workspaces/26C20B1A09XS3RA2/events/421FEEBA93GF53A2'
                        rel: self
                        method: GET
                      - uri: 'https://api.au.whispir.com/workspaces/26C20B1A09XS3RA2/events/421FEEBA93GF53A2'
                        rel: self
                        method: PUT
                        type: 'application/vnd.whispir.event-v1+xml,application/vnd.whispir.event-v1+json'
                      - uri: 'https://api.au.whispir.com/workspaces/26C20B1A09XS3RA2/messages?label=2701095%20-%20Outage%20of%20Local%20Systems%20in%20Sydney'
                        rel: retrieveEventMessages
                        method: GET
    parameters:
      - $ref: '#/components/parameters/workspaceId'
  '/workspaces/{workspaceId}/imports':
    post:
      tags:
        - Imports
      summary: Create an import
      description: |
        ## Bulk contact import
        The Whispir API will expose this functionality as a two stage process:
        1. Submit contact data within a CSV, JSON, XML payload using the /resource endpoint – which will return a resource ID
        2. Create a new import resource by submitting a POST to the /imports endpoint referencing the resource ID created in step 1.

        These two stages are further explained below.

        Create a resource specifying the contact information

        Applications can upload a valid CSV, XML or JSON resource containing the contact information that will be imported into the Whispir Platform. Whispir will return the resource ID which can be used to import or update contacts within a workspace through the imports endpoint as described below.

        ### Request Structure
        Firstly, the application needs to upload a resource using the Creating Resources.

        The resource that needs to be provided for contact importing should be in one the following format:
        *   XML
        *   JSON
        *   CSV

        Once this resource has been imported with the appropriate mime type, the application can reference this resource within the import request.

        Import a resource using the imports endpoint  

        After receiving a valid resource ID, applications can make a request to the imports endpoint within a workspace and reference the appropriate resource ID. Whispir will then create an import process that will import the specified data into the workspace.  

        Once the application has an appropriate resource ID to use within the import endpoint, the following request can be used to begin the import process.  

        **Note:** Import processes take place asynchronously. Any contacts will be created once the import process starts, and users will be able to utilise imported contacts as soon as each is completed.
      operationId: postImports
      parameters:
        - $ref: '#/components/parameters/X-Api-Key'
      requestBody:
        content:
          application/vnd.whispir.import-v1+json:
            schema:
              $ref: '#/components/schemas/import'
          application/vnd.whispir.import-v1+xml:
            schema:
              $ref: '#/components/schemas/import'
        description: import object that needs to be create import
      responses:
        '201':
          description: Created
    parameters:
      - $ref: '#/components/parameters/workspaceId'
  /auth:
    parameters: []
    post:
      summary: Create an auth token
      operationId: postAuth
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                description: ''
                type: object
                x-examples:
                  example-1:
                    token: your-generated-bearer-token
                    link: []
                properties:
                  token:
                    type: string
                    example: '"your-generated-token-string"'
                  link:
                    type: array
                    items:
                      type: object
      description: Create a JWT authentication token
      parameters:
        - schema:
            type: string
            default: application/vnd.whispir.auth-v1+json
            enum:
              - application/vnd.whispir.auth-v1+json
              - application/vnd.whispir.auth-v1+xml
          description: Application specific mime-type
          in: header
          name: Content-Type
          required: true
        - schema:
            type: string
            default: application/vnd.whispir.auth-v1+json
            enum:
              - application/vnd.whispir.auth-v1+json
              - application/vnd.whispir.auth-v1+xml
          description: Application specific mime-type
          in: header
          name: Accept
          required: true
        - schema:
            type: string
          in: header
          name: X-Api-Key
          required: true
          description: The API key for authentication
      tags:
        - Auth
      security:
        - BasicAuth: []
  /auth/verify:
    get:
      parameters:
        - schema:
            type: string
            default: application/vnd.whispir.auth-v1+json
            enum:
              - application/vnd.whispir.auth-v1+json
              - application/vnd.whispir.auth-v1+xml
          description: Application specific mime-type
          in: header
          name: Content-Type
          required: true
        - schema:
            type: string
            default: application/vnd.whispir.auth-v1+json
            enum:
              - application/vnd.whispir.auth-v1+json
              - application/vnd.whispir.auth-v1+xml
          description: Application specific mime-type
          in: header
          name: Accept
          required: true
        - schema:
            type: string
          in: header
          name: X-Api-Key
          required: true
          description: The API key for authentication
      description: Verify a JWT authentication token
      operationId: getAuthVerification
      responses:
        '200':
          description: OK
      summary: Verify an auth token
      tags:
        - Auth
      security:
        - BasicAuth: []
externalDocs:
  description: API Documentation for Whispir Platform API
  url: 'https://developers.whispir.com'
security:
  - BasicAuth: []
    ApiKeyAuth: []
servers:
  - url: 'https://api.au.whispir.com'
    description: Australia
  - url: 'https://api.ap.whispir.com'
    description: Singapore
  - url: 'https://api.ap1.whispir.com'
    description: AP1
  - url: 'https://api.nz.whispir.com'
    description: New Zealand
  - url: 'https://api.us.whispir.com'
    description: United States
  - url: 'https://api.it.whispir.com'
    description: IT
  - url: 'https://api.education.whispir.com'
    description: Education
components:
  requestBodies:
    event:
      content:
        application/vnd.whispir.event-v1+json:
          schema:
            $ref: '#/components/schemas/event'
        application/vnd.whispir.event-v1+xml:
          schema:
            $ref: '#/components/schemas/event'
      description: events object that needs to be create events
  securitySchemes:
    BasicAuth:
      type: http
      scheme: basic
      description: ''
    ApiKeyAuth:
      name: API Key
      type: apiKey
      in: header
  schemas:
    message:
      type: object
      xml:
        name: message
        prefix: ns2
      x-examples:
        SMS:
          to: '61400400400'
          subject: Test Message
          body: This is the body of my test SMS message
        Email:
          to: test@test.com
          subject: Test Message
          email:
            body: This is the body of my test Email message
            footer: This is the footer of my message
            type: text/plain
      example:
        to: '61400400400'
        subject: Test Message
        body: This is the body of my test SMS message
      title: Message
      x-internal: false
      x-tags:
        - Messages
      description: |
        Whispir has a maximum API request payload size of 10MB. Whispir will reject the request if the payload is any bigger. This payload size limit should be adhered to when creatin the message payload.
      properties:
        to:
          type: string
          example: '61987654321'
          description: |
            Allows a combination of phone numbers, email address, Whispir Contact MRIs, User MRI, Distribution List MRI, separated by `,`.

            Whispir will pick the relevant recipients based on the channels provided in the request payload 
            (including template information).

            The maximum payload size rule applies.

            When used for bulk messages, this field is optional, as bulk messages has another model to specify the `to` field recipients.
          maxLength: 10000
        subject:
          type: string
          example: Test Message
          description: |-
            The message subject. This is common for both SMS and Email channels.

            Read `body` notes on limits.

            The maximum payload size rule applies.

            When used for templates, this field is optional.
          maxLength: 1570
        body:
          type: string
          example: This is the body of my SMS message
          description: |-
            The SMS body.

            The maximum payload size rule applies.

            IMPORTANT: The total SMS length is 1570 characters for english text and 800 when UTF-8 characters are used (primarily non-english)

            The 1570 length is a combination of subject and body.
          maxLength: 1570
        email:
          $ref: '#/components/schemas/email'
        voice:
          $ref: '#/components/schemas/voice'
        web:
          $ref: '#/components/schemas/web'
        social:
          $ref: '#/components/schemas/social'
        type:
          type: string
          enum:
            - defaultNoReply
            - noDlr
          example: defaultNoReply
          description: |-
            Allows the user to modify the message behaviour for replies and DLRs (delivery receipts).

            - `defaultNoReply`: Used to reject any replies to this message.
            - `noDlr`: Used to specify that DLRs should not be enabled for this message.
        features:
          $ref: '#/components/schemas/features'
        resource:
          $ref: '#/components/schemas/resource'
        messageTemplateId:
          type: string
          example: BACEB8D46BEF5315
          description: The identifier for the Messsage Template.
        messageTemplateName:
          type: string
          example: Sample SMS Template
          description: A human-readable name for the Message Template.
        callbackId:
          type: string
          example: myCallbackName
          description: The identifier for the Callback to be invoked on Message delivery events.
        callbackParameters:
          description: Set of key-value pairs that you can attach to a callback. This can be useful for returning additional information about the object in a structured format.
          type: object
        eventId:
          type: string
          example: 2EE7FEA3343662BE
          description: The identifier for the Event to trigger.
      required:
        - to
        - subject
    email:
      type: object
      xml:
        name: email
      title: Email
      description: |-
        The email channel payload, used when sending an email Message.

        Not required when a template is provided.
      x-examples:
        Email:
          body: This is the body of my test Email message
          footer: This is the footer of my message
          type: text/plain
        Email with attachment:
          body: This is the body of my test Email message
          footer: This is the footer of my message
          type: text/plain
          resources:
            attachments:
              - attachmentName: My Awesome Photo.jpg
                attachmentDesc: This is an awesome photo of me
                derefUri: The base64 string value of `My Awesome Photo.jpg` file content
      properties:
        body:
          type: string
          example: This is the body of my email message.
          description: The email message body.
        footer:
          type: string
          example: This is the footer of my message.
          description: Plain text or html displayed at the bottom of your email message.
        type:
          type: string
          enum:
            - text/plain
            - text/html
          default: text/plain
          description: The email Message content type.
        resources:
          type: object
          description: The resources to attach to the email Message.
          properties:
            attachments:
              description: A list of attachments to attach to the email Message.
              type: array
              uniqueItems: false
              items:
                $ref: '#/components/schemas/attachment'
      required:
        - body
      x-tags:
        - Messages
    voice:
      type: object
      xml:
        name: voice
      title: Voice
      description: |-
        The voice channel payload, used when sending a Message.

        Calls are charged in 30 seconds intervals (rounded up).

        Text max length is 5000 characters.

        The maximum payload size rule applies for the body, header and type usage.

        <!-- theme: info -->

        > #### Requirements
        >
        > In order to use this functionality your account must be enabled to use the Voice module. If you're unsure whether you can use Voice, please contact the Whispir Support Team.

        ---

        ### Overview

        Whispir’s API provides you with the ability to send a voice message to any landline phone or mobile phone around the world, both via text-to-speech and custom WAV files to be played over the phone

        Whispir’s Voice module can easily connect all recipients to a single bridged call, simplifying your teleconferences and ensuring your message gets through

        Each voice call is made up of three parts:

        - Message introduction: Either Text-To-Speech (TTS) or a WAV file
        - Message acceptance: Asks the recipient to press a button or insert a PIN to hear the message
        - Message content: The concatenation of the message subject and message body. The latter can be either TTS or a WAV file. At the end the recipient will be given the possibility to acknowledge the message.
        <!-- theme: info -->

        > #### Adding pauses
        >
        > Pauses can be added to conference call details using the `+` character. Each `+` represents 1 second. Pauses allow some wait time to ensure the conference call service is ready to accept the account number and PIN.

        ### WAV files requirements

        WAV files can be used in place of Text-To-Speech to provide a custom `header` and `body`.

        Before a WAV file can be used for the Voice module, it needs to conform to certain criteria:

        - All the WAV files combined must not exceed 10 MB in total file size
        - All the WAV files must be a maximum of 8 bit, 8000 Hz, 1ch, 64 kbps
        - If a WAV file is outside these criteria please use TTS instead
      x-examples:
        Text-To-Speech (TTS):
          header: 'This is the introduction, read out to the recipient prior to any key press.'
          body: 'This is the body of the voice call, read out after the key press'
          type: 'Pin:,ConfCall:,ConfAccountNo:,ConfPinNo:,ConfModPinNo:'
        TTS with conference:
          header: 'This is the introduction, read out to the recipient prior to any key press.'
          body: 'This is the body of the voice call, read out after the key press'
          type: 'Pin:7171,ConfCall:1800123123,ConfAccountNo:098711234,ConfPinNo:8181,ConfModPinNo:4242'
        WAV:
          header: ''
          body: ''
          type: 'Pin:,ConfCall:,ConfAccountNo:,ConfPinNo:,ConfModPinNo:'
          resources:
            attachment:
              - attachmentName: MessageHeader.wav
                attachmentDesc: voiceintro.wav
                derefUri: base64_uri_data
              - attachmentName: MessageBody.wav
                attachmentDesc: voicebody.wav
                derefUri: base64_uri_data
      x-tags:
        - Messages
      properties:
        header:
          type: string
          example: 'This is the introduction, read out to the recipient prior to any key press.'
          description: Introduction text played with the subject.
        body:
          type: string
          example: 'This is the body of the voice call, read out after the key press'
          description: 'Body text, read out to the recipient after the subject and header.'
        type:
          type: string
          default: 'Pin:,ConfCall:,ConfAccountNo:,ConfPinNo:,ConfModPinNo:'
          example: 'Pin:7171,ConfCall:1800123123,ConfAccountNo:098711234,ConfPinNo:8181,ConfModPinNo:4242'
          description: |-
            The conference call details of the voice message. Required when no conference call is being used. The minimum string to be used is specified in the example. Read the following section for information on each field.

            The following parameters can be set by specifying the value after the `:` in the `type` string:

            | Field         | Description |
            | ------------- |------------ |
            | Pin           | The access code required to be inserted from the recipient to hear the Voice message after the "header" is over. It can be left blank and then the user will be asked to proceed dialling "1". <br><br> For example, `7171`. <br><br> If the right code is inserted then "subject" and "body" of the Voice Message will be reproduced. The user will be able to dial "1" to replay the message, "2" to join the conference call or "3" to receive the details to dial in later. <br><br> In this last case the details - a Dial-In number and a PIN - will be repeated 3 times. |
            | ConfCall      | The teleconference line that will be used in the voice call. <br><br> For example, `1800123123`. <br><br> It is possible to reference this value in other channels using the **@@teleconf_number@@** custom variable. |
            | ConfAccountNo | The teleconference account or room number that is used in the voice call. <br><br> For example, `098711234`. <br><br> It is possible to reference this value in other channels using the **@@teleconf_account@@** custom variable. |
            | ConfPinNo     | The teleconference room PIN that is used in the voice call. <br><br> For example, `8181`. <br><br> It is possible to reference this value in other channels using the **@@teleconf_pin@@** custom variable. |
            | ConfModPinNo  | The teleconference moderator PIN that is used in the voice call. <br><br> For example, `4242`. <br><br> It is possible to reference this value in other channels using the **@@teleconf_mod_pin@@** custom variable. |
        resources:
          type: object
          description: Provides a configuration object for specifying custom audio for the voice header and body.
          properties:
            attachment:
              type: array
              description: |-
                The header and body attachments containing WAV files. Read the following section for configuring each voice field attachment:

                In addition to the parameters already specified for the TTS Voice calls, each attached WAV file must have the `attachmentDesc` named these specific values, to override the TTS voice:

                | Voice field    | attachmentDesc |
                | -------------- |--------------- |
                | header         | `"voiceintro.wav"` |
                | body           | `"voicebody.wav"` |
              items:
                $ref: '#/components/schemas/attachment'
      required:
        - body
        - type
    web:
      description: |-
        The web channel payload, used when attaching web content to a Message.

        Not required when a template is provided.
      type: object
      xml:
        name: web
      title: Web
      properties:
        body:
          type: string
          example: This is the content of my web publishing or Rich Push Message
          description: The linked web content body.
        type:
          type: string
          enum:
            - text/plain
            - text/html
          default: text/plain
          description: The web Message content type.
      x-tags:
        - Messages
      x-examples:
        Web:
          body: This is the content of my web publishing or Rich Push Message
          type: text/plain
    social:
      type: object
      xml:
        name: social
      title: Social
      x-tags:
        - Messages
      x-examples:
        Twitter:
          social:
            - id: social
              body: Twitter Content
              type: text/plain
        Facebook:
          social:
            - id: social_long
              body: Facebook Content
              type: text/plain
      description: Whispir can publish content to your Twitter and Facebook walls. Other socials can be made available upon request.
      properties:
        social:
          type: array
          description: The list of social channel content.
          items:
            type: object
            description: The social channel object.
            properties:
              id:
                type: string
                description: |-
                  The identifier for the social content channel. Read the following section for information on each channel.

                  | Channel        | id |
                  | -------------- |--------------- |
                  | Twitter        | `"social"` |
                  | Facebook       | `"social_long"` |
                enum:
                  - social
                  - social_long
              body:
                type: string
                example: Facebook Content
                description: The social content body.
              type:
                type: string
                description: The social message content type.
                enum:
                  - text/plain
                  - text/html
    features:
      type: object
      xml:
        name: features
      title: Features
      x-tags:
        - Messages
      description: |-
        Whispir allows you to send push notifications to any iOS and Android-based apps

        Setting up the platform to handle push notifications involves some one-time steps and some periodically repeated steps (updating push tokens). See Apps to get a clear understanding of the related steps and endpoints. Whispir doesn't support sending push notifications to device tokens directly. Read more in Contact devices about how to register the device tokens under contacts.
      x-examples:
        Push Message:
          pushOptions:
            appId: appId
        Escalation:
          pushOptions:
            escalationMins: 3
        Notifications:
          pushOptions:
            notifications: enabled
      properties:
        pushOptions:
          type: object
          description: The object defining options for push messages.
          properties:
            notifications:
              type: string
              description: A flag indicating whether notifications should be enabled for message replies.
              enum:
                - enabled
                - disabled
            escalationMins:
              type: string
              example: '3'
              description: The number of minutes to wait for a reply until escalating to the next contact.
            appId:
              type: string
              description: The identifier for the registered application.
              example: appId
    resource:
      type: object
      xml:
        name: resource
        prefix: ns3
      x-tags:
        - Resources
      title: Resource
      description: |-
        When you’re creating a resource, the following conditions apply:

        - Maximum of 10 MB per file being uploaded
        - Transactions have an enforced timeout
        - Resources are available in the Whispir platform for a limited time [90 days]. After this time they are automatically cleaned. This is a configurable setting for Whispir Administrators
      properties:
        name:
          type: string
          description: Specifies the name of the file being uploaded. The extension of the file too is allowed to be present in the name.
          example: sample.json
        scope:
          type: string
          description: |-
            Specifies the permission scope of the file being uploaded. The scope defines the access restriction of the resource. It can only be one of the following:

            - **public**: Public files have an addressable URL and are available publicly
            - **private**: Private files have no URL and are only available for bulk messaging purposes and for importing contacts
          enum:
            - private
            - public
        mimeType:
          type: string
          description: |-
            The mime type of the file that is being uploaded. The type is dependent on the scope of the resource.

            - **public**: Public files can be any mimetype, e.g. text/HTML or text/CSV
            - **private**: Private files are restricted to CSV, JSON and XML. The respective mimetypes to be used are text/csv, application/json, application/xml
          example: application/json
        derefUri:
          type: string
          description: The base64 representation of the file being submitted.
          example: W3sNCiAiZnVsbG5hbWUiOiAiRnJhbmNvIEhpbWJvbGkiLA0KICJlbWFpbCI6ICJmdHJpbWJvbGlAZ21haWwuY29tIiwNCiAibW9iaWxlIjogIjA0MTA1MDkwMDEiLA0KICJzdHJlZXRhZGRyZXNzIjogIjEyMyBBdWJ1cm4gUmQiLA0KICJzdWJ1cmIiOiAiSGF3dGhvcm4iLA0KICJSZWZlcmVuY2UiOiAiWHByZXNzIE1haWwiLA0KICJNc2dEYXRhIiA6IHsgDQoJIlBPQkRldGFpbCI6IHsNCgkJIkRhdGVBbmRUaW1lIiA6ICIwOS1TZXAtMjAxNSAxMjoxNSBQTSIsDQoJCSJNZXNzYWdlIiA6ICJQbGVhc2UgbGV0IHVzIGtub3cgaWYgdGhlIHRpbWUgc2xvdCBpcyBhY2NlcHRhYmxlLiBSZXNwb25kIHdpdGggYSAnTm8nIHRvIGdldCBhbHRlcm5hdGl2ZSB0aW1lIHNsb3QiDQoJfQ0KICB9DQp9LA0Kew0KICJmdWxsbmFtZSI6ICJKb3JkYW4gV2luZHNvciIsDQogImVtYWlsIjogImp3aW5kc29yQHlhaG9vLmNvbSIsDQogIm1vYmlsZSI6ICIwNDEwNTA5MDAyIiwNCiAic3RyZWV0YWRkcmVzcyI6ICIzNjAgV2Fsc2ggUmQiLA0KICJzdWJ1cmIiOiAiTm9ydGggTWVsYm91cm5lIiwNCiAiUmVmZXJlbmNlIjogIlhwcmVzcyBNYWlsIiwNCiAiTXNnRGF0YSIgOiB7IA0KCSJQT0JEZXRhaWwiOiB7DQoJCSJEYXRlQW5kVGltZSIgOiAiMDktU2VwLTIwMTUgMTI6MzAgUE0iLA0KCQkiTWVzc2FnZSIgOiAiUGxlYXNlIGxldCB1cyBrbm93IGlmIHRoZSB0aW1lIHNsb3QgaXMgYWNjZXB0YWJsZS4gUmVzcG9uZCB3aXRoIGEgJ05vJyB0byBnZXQgYWx0ZXJuYXRpdmUgdGltZSBzbG90Ig0KCX0NCiAgfQ0KfV0
      required:
        - name
        - scope
        - mimeType
        - derefUri
      x-examples:
        JSON:
          name: sample.json
          scope: private
          mimeType: application/json
          derefUri: W3sNCiAiZnVsbG5hbWUiOiAiRnJhbmNvIEhpbWJvbGkiLA0KICJlbWFpbCI6ICJmdHJpbWJvbGlAZ21haWwuY29tIiwNCiAibW9iaWxlIjogIjA0MTA1MDkwMDEiLA0KICJzdHJlZXRhZGRyZXNzIjogIjEyMyBBdWJ1cm4gUmQiLA0KICJzdWJ1cmIiOiAiSGF3dGhvcm4iLA0KICJSZWZlcmVuY2UiOiAiWHByZXNzIE1haWwiLA0KICJNc2dEYXRhIiA6IHsgDQoJIlBPQkRldGFpbCI6IHsNCgkJIkRhdGVBbmRUaW1lIiA6ICIwOS1TZXAtMjAxNSAxMjoxNSBQTSIsDQoJCSJNZXNzYWdlIiA6ICJQbGVhc2UgbGV0IHVzIGtub3cgaWYgdGhlIHRpbWUgc2xvdCBpcyBhY2NlcHRhYmxlLiBSZXNwb25kIHdpdGggYSAnTm8nIHRvIGdldCBhbHRlcm5hdGl2ZSB0aW1lIHNsb3QiDQoJfQ0KICB9DQp9LA0Kew0KICJmdWxsbmFtZSI6ICJKb3JkYW4gV2luZHNvciIsDQogImVtYWlsIjogImp3aW5kc29yQHlhaG9vLmNvbSIsDQogIm1vYmlsZSI6ICIwNDEwNTA5MDAyIiwNCiAic3RyZWV0YWRkcmVzcyI6ICIzNjAgV2Fsc2ggUmQiLA0KICJzdWJ1cmIiOiAiTm9ydGggTWVsYm91cm5lIiwNCiAiUmVmZXJlbmNlIjogIlhwcmVzcyBNYWlsIiwNCiAiTXNnRGF0YSIgOiB7IA0KCSJQT0JEZXRhaWwiOiB7DQoJCSJEYXRlQW5kVGltZSIgOiAiMDktU2VwLTIwMTUgMTI6MzAgUE0iLA0KCQkiTWVzc2FnZSIgOiAiUGxlYXNlIGxldCB1cyBrbm93IGlmIHRoZSB0aW1lIHNsb3QgaXMgYWNjZXB0YWJsZS4gUmVzcG9uZCB3aXRoIGEgJ05vJyB0byBnZXQgYWx0ZXJuYXRpdmUgdGltZSBzbG90Ig0KCX0NCiAgfQ0KfV0
    template:
      type: object
      required:
        - messageTemplateName
        - subject
        - body
        - email
        - voice
        - web
      properties:
        messageTemplateName:
          type: string
          description: Specifies the name of the message template to be used within message requests.
          example: Sample SMS Template
        messageTemplateDescription:
          type: string
          description: Specifies the description of the message template for others to understand its purpose.
          example: Template to provide an example on whispir.io
        responseTemplateId:
          type: string
          description: Specifies the ID of the Response Rule that should be associated with this Message Template.
          example: responseTemplateId
        subject:
          type: string
          description: 'Specifies the first line of the SMS message or Voice call, and the subject of the Email message.'
          example: Test SMS Message
        body:
          type: string
          description: Specifies the content of the SMS message.
          example: This is the body of my test SMS message
        email:
          $ref: '#/components/schemas/email'
        voice:
          $ref: '#/components/schemas/voice'
        web:
          $ref: '#/components/schemas/web'
        social:
          $ref: '#/components/schemas/social'
        type:
          type: string
          description: Allows the user to modify the message behaviour for replies and DLRs (delivery receipts)
          example: defaultNoReply
        features:
          $ref: '#/components/schemas/features'
      xml:
        name: template
        prefix: ns3
      x-tags:
        - Templates
      title: Template
    responseTemplatePattern:
      type: object
      properties:
        name:
          type: string
          example: Yes Rule
        pattern:
          type: string
          example: startswith
        textPrompt:
          type: string
          example: 'YES'
        voicePrompt:
          type: string
          example: '1'
        spokenVoicePrompt:
          type: string
          example: to select YES
        colour:
          type: string
          example: '#00947d'
      xml:
        name: responseTemplatePattern
      x-tags:
        - Response Rules
      title: Response Template Pattern
    responseRule:
      type: object
      properties:
        name:
          type: string
          example: Response Rule 1
        description:
          type: string
        responseTemplatePatterns:
          $ref: '#/components/schemas/responseTemplatePattern'
      xml:
        name: responserule
        prefix: ns3
      x-tags:
        - Response Rules
      title: Response Rule
    contact:
      type: object
      xml:
        name: contact
        prefix: ns2
      x-tags:
        - Contacts
      title: Contact
      x-examples:
        Basic:
          firstName: John
          lastName: Wick
          workMobilePhone1: '61400400400'
          workEmailAddress1: testUser@example.com
          workCountry: Australia
        Comprehensive:
          firstName: John
          lastName: Wick
          workMobilePhone1: '61400400400'
          workEmailAddress1: testUser@example.com
          workCountry: Australia
          timezone: Australia/Melbourne
          title: Dr
          workMobilePhone2: '61500500500'
          workEmailAddress2: newUser@example.com
          workPhoneAreaCode1: '09'
          workPhone1: '5006000'
          workPhoneAreaCode2: '09'
          workPhone2: '5007000'
          workFaxAreaCode1: '09'
          workFax1: '5008000'
          workSatellitePhone: '61600600600'
          workOtherPhone: '61700700700'
          workAddress1: Level 15
          workAddress2: 360 Collins St
          workSuburb: Melboure
          workState: Victoria
          workPostCode: '3000'
          workPostalAddress1: Level 15
          workPostalAddress2: 360 Collins St
          workPostalSuburb: Melboure
          workPostalState: Victoria
          workPostalPostCode: '3000'
          personalEmailAddress1: personalPrimaryUser@example.com
          personalEmailAddress2: personalSecondaryUser@example.com
          personalAddress1: Level 15
          personalAddress2: 360 Collins St
          personalSuburb: Melboure
          personalState: Victoria
          personalPostCode: '3000'
          personalCountry: Australia
          personalPhoneAreaCode1: '09'
          personalPhone1: '5006000'
          personalPhoneAreaCode2: '09'
          personalPhone2: '5007000'
          personalFaxAreaCode1: '09'
          personalFax1: '5008000'
          otherPhoneAreaCode1: '09'
          otherPhone1: '5009000'
          otherMobile: '61900900900'
          otherFirstName: Harold
          otherLastName: Wickman
          otherTitle: Mr
          status: A
          companyName: Whispir
          jobTitle: Software Engineer
          division: Technology
          businessUnit: Core Platform
          department: Research & Development
          teamName1: Optimus Prime
          teamName2: Bumblebee
          role1: Administrator
          role2: Analyst
          locations:
            - latitude: 41.9028
              longitude: -12.4964
              type: CurrentLocation
          messagingoptions:
            - channel: sms
              enabled: true
              primary: workMobilePhone1
              secondary: workMobilePhone1
              tertiary: workMobilePhone1
      properties:
        firstName:
          type: string
          example: John
          description: The first name of the contact.
        lastName:
          type: string
          example: Wick
          description: The last name of the contact.
        workMobilePhone1:
          type: string
          example: '61400400400'
          description: The primary work mobile number of the contact.
        workEmailAddress1:
          type: string
          example: testUser@example.com
          description: The primary work email address of the contact.
        workCountry:
          type: string
          example: Australia
          description: The work country of the contact.
        timezone:
          type: string
          example: Australia/Melbourne
          description: |-
            The time zone in which the contact lives in. Values are relative to GMT.

            Supported values are:

            * Offset from GMT in the format `+/-NN`. For example, `+10`.
            * Worldwide time zone in the format `Country/City`. For example, `Australia/Melbourne`

            See the list of [worldwide time zones](https://en.wikipedia.org/wiki/List_of_time_zones_by_country).
        title:
          type: string
          example: Dr
          description: The title to address the contact with.
        workMobilePhone2:
          type: string
          example: '61500500500'
          description: The secondary work mobile number of the contact.
        workEmailAddress2:
          type: string
          example: newUser@example.com
          description: The secondary work email address of the contact.
        workPhoneAreaCode1:
          type: string
          example: '09'
          description: The primary work phone number area code of the contact.
        workPhone1:
          type: string
          example: '5006000'
          description: The primary work phone number of the contact.
        workPhoneAreaCode2:
          type: string
          example: '09'
          description: The secondary work phone number area code of the contact.
        workPhone2:
          type: string
          example: '5007000'
          description: The secondary work phone number of the contact.
        workFaxAreaCode1:
          type: string
          example: '09'
          description: The work fax number area code of the contact.
        workFax1:
          type: string
          example: '5008000'
          description: The work fax number of the contact.
        workSatellitePhone:
          type: string
          example: '61600600600'
          description: The work satellite phone number of the contact.
        workOtherPhone:
          type: string
          example: '61700700700'
          description: The work other phone number of the contact.
        workAddress1:
          type: string
          example: Level 15
          description: The first work address line of the contact.
        workAddress2:
          type: string
          example: 360 Collins St
          description: The second work address line of the contact.
        workSuburb:
          type: string
          example: Melboure
          description: The work address suburb of the contact.
        workState:
          type: string
          example: Victoria
          description: The work address state of the contact.
        workPostCode:
          type: string
          example: '3000'
          description: The work address post code of the contact.
        workPostalAddress1:
          type: string
          example: Level 15
          description: The first work postal address line of the contact.
        workPostalAddress2:
          type: string
          example: 360 Collins St
          description: The second work postal address line of the contact.
        workPostalSuburb:
          type: string
          example: Melboure
          description: The work postal address suburb of the contact.
        workPostalState:
          type: string
          example: Victoria
          description: The work postal address state of the contact.
        workPostalPostCode:
          type: string
          example: '3000'
          description: The work postal address post code of the contact.
        personalEmailAddress1:
          type: string
          example: personalPrimaryUser@example.com
          description: The primary personal email address of the contact.
        personalEmailAddress2:
          type: string
          example: personalSecondaryUser@example.com
          description: The secondary personal email address of the contact.
        personalAddress1:
          type: string
          example: Level 15
          description: The first personal address line of the contact.
        personalAddress2:
          type: string
          example: 360 Collins St
          description: The second personal address line of the contact.
        personalSuburb:
          type: string
          example: Melboure
          description: The personal address suburb of the contact.
        personalState:
          type: string
          example: Victoria
          description: The personal address state of the contact.
        personalPostCode:
          type: string
          example: '3000'
          description: The personal address post code of the contact.
        personalCountry:
          type: string
          example: Australia
          description: The personal address country of the contact.
        personalPhoneAreaCode1:
          type: string
          example: '09'
          description: The primary personal phone number area code of the contact.
        personalPhone1:
          type: string
          example: '5006000'
          description: The primary personal phone number of the contact.
        personalPhoneAreaCode2:
          type: string
          example: '09'
          description: The secondary personal phone number area code of the contact.
        personalPhone2:
          type: string
          example: '5007000'
          description: The secondary personal phone number of the contact.
        personalFaxAreaCode1:
          type: string
          example: '09'
          description: The personal fax number area code of the contact.
        personalFax1:
          type: string
          example: '5008000'
          description: The personal fax number of the contact.
        otherPhoneAreaCode1:
          type: string
          example: '09'
          description: The other phone number area code of the contact.
        otherPhone1:
          type: string
          example: '5009000'
          description: The other phone number of the contact.
        otherMobile:
          type: string
          example: '61900900900'
          description: The other mobile number of the contact.
        otherFirstName:
          type: string
          example: Harold
          description: The other first name of the contact.
        otherLastName:
          type: string
          example: Wickman
          description: The other last name of the contact.
        otherTitle:
          type: string
          example: Mr
          description: The other title to address the contact with.
        status:
          type: string
          enum:
            - A
            - D
          description: 'The validity status of the contact, either `A`ctive or `D`isabled.'
        companyName:
          type: string
          description: The company name of the contact.
          example: Whispir
        jobTitle:
          type: string
          description: The job title of the contact.
          example: Software Engineer
        division:
          type: string
          description: The division in the company to which the contact is associated.
          example: Technology
        businessUnit:
          type: string
          description: The business unit in the company to which the contact is associated.
          example: Core Platform
        department:
          type: string
          description: The department in the company to which the contact is associated.
          example: Research & Development
        teamName1:
          type: string
          description: The primary team name of the contact.
          example: Optimus Prime
        teamName2:
          type: string
          description: The secondary team name of the contact.
          example: Bumblebee
        role1:
          type: string
          description: The primary role of the contact.
          example: Administrator
        role2:
          type: string
          description: The secondary role of the contact.
          example: Analyst
        locations:
          $ref: '#/components/schemas/locations'
        messagingoptions:
          $ref: '#/components/schemas/messagingoptions'
      required:
        - firstName
        - lastName
        - workMobilePhone1
        - workEmailAddress1
        - workCountry
        - timezone
      description: The contact object.
    distributionlist:
      type: object
      required:
        - name
        - access
        - visibility
      properties:
        name:
          type: string
          example: My Distribution List
        description:
          type: string
        access:
          type: string
          example: Open
        visibility:
          type: string
          example: Public
        contactIds:
          type: string
        userIds:
          type: string
        distListIds:
          type: string
      xml:
        name: distributionlists
        prefix: ns1
      x-tags:
        - Distribution Lists
      title: Distribution List
    scenario:
      type: object
      required:
        - name
        - description
        - message
      properties:
        name:
          type: string
          description: Specifies the name of the scenario
          example: Fire Evacuation Block A
        description:
          type: string
          description: Specifies the description of the scenario
          example: Fire evacuation notification for A block residents
        allowedUsers:
          type: string
          description: 'Specifies the usage permission - 1)EVERYONE 2)SELECTEDUSERS When SELECTEDUSERS is provided, then `allowedUserIds` shall contain the userID of the allowed users.'
        allowedUserIds:
          type: string
          description: Specifies the comma separated list of users who can run this scenario.Only contains value when the allowedUsers is set to `SELECTEDUSERS`
        message:
          $ref: '#/components/schemas/message'
      xml:
        name: scenario
        prefix: ns2
      x-tags:
        - Scenarios
      title: Scenario
    callback:
      type: object
      xml:
        name: companyapicallback
        prefix: ns2
      x-tags:
        - Callbacks
      title: Callback
      description: 'The callback object, used to configure the callback (also known as webhook).'
      x-examples:
        Message Reply:
          name: Message Reply
          url: 'https://example.com/callback'
          auth:
            type: httpheader
            key: MY_AUTH_KEY
          contentType: json
          removeHTML: disabled
          retriesEnabled: true
          email: me@example.com
          callbacks:
            reply: enabled
        example-1:
          name: Undeliverable Message
          url: 'https://example.com/callback'
          auth:
            type: httpheader
            key: MY_AUTH_KEY
          contentType: json
          removeHTML: disabled
          retriesEnabled: true
          email: me@example.com
          callbacks:
            undeliverable: disabled
      properties:
        name:
          type: string
          description: Specifies the name (ID) of the callback to be used within message requests.
          example: Callback Name
        url:
          type: string
          description: Specifies the service URL that API Callbacks should be forwarded to.
          example: 'https://example.com/callback'
          format: uri
        auth:
          type: object
          description: The authentication object to specify how to authenticate against the callback `url`.
          properties:
            type:
              type: string
              enum:
                - httpheader
                - querystring
              description: |-
                Specifies how to authenticate the request made to the callback server.

                The values available for this parameter are:

                - `httpheader` - token provided as a custom HTTP header, namely X-Whispir-Callback-Key. This is our recommended approach because of a higher level of security
                - `querystring` - token provided by the auth query parameter appended to the endpoint URL
            key:
              type: string
              example: MY_AUTH_KEY
              description: |-
                Specifies the value to be passed to authenticate that the request has originated from Whispir.

                When added to this payload, Whispir will include the token in every request made to the listening application.
        contentType:
          type: string
          description: Specifies the content type that should be sent to this endpoint.
          enum:
            - json
            - xml
        removeHTML:
          type: string
          description: Specifies whether HTML should be stripped from responses.
          enum:
            - enabled
            - disabled
          default: disabled
        retriesEnabled:
          type: boolean
          description: Specifies whether Whispir should perform retries in the event there is a failure accessing the callback service.
          example: true
        email:
          type: string
          description: Specifies the email address where failure notifications should be sent.
          example: me@example.com
        callbacks:
          type: object
          description: The object to specify which events callbacks should be enabled for.
          properties:
            reply:
              type: string
              enum:
                - enabled
                - disabled
              description: A boolean flag specifying whether message reply callbacks are enabled.
            undeliverable:
              type: string
              enum:
                - enabled
                - disabled
              description: A boolean flag specifying whether undeliverable message callbacks are enabled.
    workspace:
      type: object
      properties:
        projectName:
          type: string
          description: Specifies the name of the Workspace to be created.
          example: A Space Odessey
        projectNumber:
          type: string
          description: 'Specifies the reference ID for the workspace from the User Side. Generally not used. Note:This is not the actual workspace ID. It is just a custom reference ID given by you for your own purposes.'
          example: '2001'
        status:
          type: string
          description: Specifies the status of the Workspace being created. The status can be one of - 1) Active (A) 2)Disabled (D)
          example: A
        billingcostcentre:
          type: string
          description: Only applicable to customers with the Billing Cost Centre Module enabled. Allows the user to set a billing cost centre for the Workspace.
          example: Hollywood
      xml:
        name: workspace
        prefix: ns3
      x-tags:
        - Workspaces
      title: Workspace
    locations:
      description: The locations for the contact.
      type: array
      xml:
        name: locations
      title: Locations
      x-examples:
        One Location:
          - location:
              latitude: 41.9028
              longitude: -12.4964
              type: CurrentLocation
        Multiple Locations:
          - location:
              latitude: 41.9028
              longitude: -12.4964
              type: CurrentLocation
          - location:
              latitude: 41.5825
              longitude: -12.3842
              type: Work
          - location:
              latitude: 41.7262
              longitude: -12.4726
              type: Home
      items:
        type: object
        description: The location object.
        properties:
          latitude:
            type: number
            description: 'The measurement of distance north or south of the Equator, for the contact.'
            example: 41.9028
            minimum: -90
            maximum: 90
          longitude:
            type: number
            description: 'The measurement of distance east or west of the prime meridian, for the contact.'
            example: -12.4964
            minimum: -180
            maximum: 180
          type:
            description: A description for the location. At least one element of the `locations` array must have a `type` equal to `CurrentLocation`.
            type: string
            example: CurrentLocation
    messagingoptions:
      description: The message channel options for the contact.
      type: array
      title: Messaging Options
      items:
        type: object
        description: The object to configure message channel options.
        properties:
          channel:
            type: string
            description: The message channel.
            enum:
              - sms
              - email
              - voice
          enabled:
            description: A boolean flag indicating whether messaging is enabled for the `channel`.
            type: boolean
            example: true
          primary:
            type: string
            description: The primary contact address for the `channel`.
            enum:
              - workMobilePhone1
              - workMobilePhone2
              - workEmailAddress1
              - workEmailAddress2
              - personalMobilePhone1
              - personalEmailAddress1
          secondary:
            type: string
            description: The secondary contact address for the `channel`.
            enum:
              - workMobilePhone1
              - workMobilePhone2
              - workEmailAddress1
              - workEmailAddress2
              - personalMobilePhone1
              - personalEmailAddress1
          tertiary:
            type: string
            description: The tertiary contact address for the `channel`.
            enum:
              - workMobilePhone1
              - workMobilePhone2
              - workEmailAddress1
              - workEmailAddress2
              - personalMobilePhone1
              - personalEmailAddress1
    activity:
      type: object
      required:
        - module
        - action
        - status
      properties:
        action:
          type: string
          description: Specifies the action performed during this activity. The following are the list of actions that can be performed <ul><li>Create</li><li>Update</li><li>Move</li><li>Copy</li><li>Draft</li><li>Send</li><li>Modified </li><li>Delete</li><li>Contact Import File</li><li>Login </li><li>Approve</li><li>Reject</li><li>Dispatch</li><li>Register</li><li>Accept</li><li>Closed</li><li>Map</li><li>Un-map</li></ul>
          example: Send
        module:
          type: string
          description: Specifies the module to which this activity belongs to. The following are the list of actions that can be performed<ul><li>System</li><li>Message</li><li>Scheduled Message</li><li>User</li><li>Contact</li><li>DistributionList</li><li>Template</li><li>Workspace</li><li>Event</li><li>WebService</li><li>Settings</li> <li>Conversation</li><li>Gateway</li><li>Workspace Mapping</li><li>Folders</li><li>Team</li><li>RSS</li><li>API Mapping </li><li>Asset</li><li>Instruction</li></ul>
        workspace:
          type: string
          description: The workspace in which this activity is performed. This will usually be the API user’s default workspace
        user:
          type: string
          description: The username of the person who performed this activity. This will usually be the API user invoking the creation.
        status:
          type: string
          description: Specifies the status of the activity. The status can be one of 1)Successful 2)Failed 3)Rejected
          example: Successful
        description:
          type: string
          description: The description of the activity. This is a free text that details about the activity.
          example: Message sent via the Whispir's Java library
        time:
          type: string
          description: 'The date and time of the activity in the format:dd/mm/yy hh:mm. This will be defaulted to the time at which this activity is created.'
      xml:
        name: activity
        prefix: ns3
      x-tags:
        - Activities
      title: Activity
    user:
      type: object
      required:
        - userName
        - password
        - firstName
        - lastName
        - timezone
        - workCountry
      properties:
        userName:
          type: string
          description: Specifies the username for the account
          example: John.Wick
        password:
          type: string
          description: 'Specifies the password for the account <p><b>Note:</b>The following are the rules for the password:</p><p><ul><li>Alpha Numeric [a-zA-Z0-9_]</li><li>Must have at least one uppercase and one lowercase character</li></ul></p>'
        firstName:
          type: string
          description: Specifies the firstName of the user
          example: John
        middleName:
          type: string
          description: Specifies the middleName of the user
          example: ''
        lastName:
          type: string
          description: Specifies the lastName of the user
          example: Wick
        title:
          type: string
          description: The title of the name
          example: ''
        nickname:
          type: string
          description: Preferred name to be shown in the platfom interface
        status:
          type: string
          description: 'Specifies the validity status of the user. The status can be one of -<ul><li>Active (A)</li><li>InActive (I)</li><li>Pending ( P)</li><li>Suspended (B)</li><li>Deleted (D)</li></ul><p><b>Note:</b>The default status is PENDING. One cannot set the status while creation of account. Read `User State Machine` again mentioned above.</p>'
        companyName:
          type: string
          description: Specifies the company name
        jobTitle:
          type: string
          description: Specifies the job title at the company
        division:
          type: string
          description: Specifies the Division in the company to which this user is associated with
        department:
          type: string
          description: Specifies the Department in the company to which this user is associated with
        Work Place Address:
          type: string
          description: 'Specifies the primary and Secondary values for each respective type. Of all these the workEmailAddress1 is the mandatory field.<ul><li>workEmailAddress1, workEmailAddress2</li><li>workAddress1, workAddress2</li><li>workSuburb, workState</li><li>workPostCode, workCountry</li><li>workPostalAddress1, workPostalAddress2</li><li>workPostalSuburb, workPostalState</li><li>workPostalPostCode, workPostalCountry</li></ul>'
        Work Place Phones:
          type: integer
          description: 'Specifies the primary and Secondary values for each respective type. Of all these the workMobilePhone1 is the mandatory field.<ul><li>workMobilePhone1, workMobilePhone2</li><li>workPhoneAreaCode1, workPhone1</li><li>workPhoneAreaCode2, workPhone2</li><li>workFaxAreaCode1, workFax1</li><li>workSetellitePhone, WorkOtherPhone</li></ul>'
          example: 61423456789
        workCountry:
          type: string
          example: Australia
        timezone:
          type: string
          description: 'Specifies the timezone in which the user lives in. Values in relation to GMT.<p>Supported values are:</p><ul><li>Offset from GMT in the format `+/-NN` e.g. `+10`</li><li>Worldwide Timezone Format in the format `Country/City` e.g. `Australia/Melbourne`</li></ul>'
          example: Australia/Melbourne
        Personal Address:
          type: string
          description: 'Specifies the primary and Secondary values for each respective type<ul><li>personalEmailAddress1, personalEmailAddress2</li><li>personalAddress1, personalAddress2</li><li>personalSuburb, personalState</li><li>personalCountry, personalPostCode</li></ul>'
        Personal Phones:
          type: integer
          description: 'Specifies the primary and Secondary values for each respective type<ul><li>personalPhoneAreaCode1, personalPhone1</li><li>personalPhoneAreaCode2, personalPhone2</li><li>personalFaxAreaCode1, personalFax1</li><li>otherPhoneAreaCode1, otherPhone1</li><li>otherMobile</li></ul>'
          example: 61423456789
        Alias Fields:
          type: string
          description: 'The other (alias) name and title fields<ul><li>otherFirstName, otherLastName, otherTitle</li></ul>'
      xml:
        name: user
        prefix: ns2
      x-tags:
        - Users
      title: User
    event:
      type: object
      required:
        - eventLabel
        - status
        - description
      properties:
        eventLabel:
          type: string
          description: Specifies the name of the label used for the messages sent under this event
          example: 2701095 - Outage of Local Systems in Sydney
        status:
          type: string
          description: 'Specifies the status of the event. The status can be one of <ul><li>Active</li><li>Resolved<l></ul>Note:The default status is Open.'
          example: Open
        summary:
          type: string
          description: Specifies the summary of the event. A single liner that can be equivalent to the Subject of an email.
          example: Outage of systems in Sydney
        description:
          type: string
          description: Specifies the detailed description of the event
          example: 'ATMs are non responsive, teams to be sent to investigate'
        location:
          type: string
          description: 'Specifies the latitude, longitude values of the event location. This helps to show the event location on Whispir’s geo-map feature set and coordinated communication based on the geo location of the event.'
          example: '0.0,0.0'
        startDate:
          type: string
          description: 'Specifies the startdate of the event. This is a mandatory value.The date should be in the format of DD/MM/YYYY HH:MI:SS in 24hrs format. e.g 11/09/2015 17:21:00 for 11th September 2015 5.21 PM.'
          example: '11/09/2015 17:41:00'
        endDate:
          type: string
          description: 'Specifies the endDate of the event.The date should be in the format of DD/MM/YYYY HH:MI:SS in 24hrs format. e.g. 11/09/2015 19:26:00 for 11th September 2015 7.26 PM.'
        severity:
          type: string
          description: 'Specifies the severity of the event. While this can change from company to company, the standard value set to be chosen from is <ul><li>Severity 5 - Routine Maintenance Tasks</li><li>Severity 4 - Scheduled System Changes</li><li>Severity SL3 - Minor Outage (Some Service Degradation)</li><li>Severity SL2 - Moderate Outage (Service Degradation)</li><li>Severity SL1 - Major Outage (Significant Service Unavailablity)</li><ul>'
          example: Severity 3 - Minor Outage (Some Service Degradation)
        Priority:
          type: string
          description: 'Specifies the priority of the event. While this can change from company to company, the standard value set to be chosen from is <ul><li>Priority 5 - No Set Resolution Period</li><li>Priority 4 - <1 week Resolution</li><li>Priority 3 - <3 day Resolution</li><li>Priority 2 - <1 day Resolution</li><li>Priority 1 - <2hr Resolution</li></ul>'
        duration:
          type: string
          description: 'The duration of the event in HH:MI:SS. e.g. 02:05:00 This can be substituted in the place of end date if required. Or a subset of the time between the start and end Dates.'
        category:
          type: string
          description: Specifies the category of event. The default values to choose from are <ul><li>Internal Systems</li><li>External Systems</li><li>Infrasturcture</li></ul>
          example: Internal
        subcategory:
          type: string
          description: Specifies the subcategory in the category. The default values to choose from are <ul><li>Customer Impact</li><li>Cust & Staff Impact</li><li>Staff Impact</li><li>Impact Unknown</li></ul>
        type:
          type: string
          description: Specifies the type of event. The default values to choose from are <ul><li>Multiple Issues</li><li>NIL</li><li>Network</li><li>Applications</li><li>Mobile Apps</li></ul>
        externalVendor:
          type: string
          description: Specifies the name/contact who is the external vendor related to this event
        lineNumber:
          type: string
          description: Specifies the line Number (production lines)
        externalCaseNumber:
          type: string
          description: Specifies the number as tracked by an external party realted to this event
        platform:
          type: string
          description: Specifies the platform in the company to which this event is associated with
        services:
          type: string
          description: Specifies the service in the company to which this event is associated with
        impactCondition:
          type: string
          description: Specifies the impact condition of this event to the company. These values can be configured via custom lists as these can be very specific to the company. The default list to choose from are - <ul><li>All services not available</li><li>All services degraded</li><li>Some services not available</li><li>Some services degraded</li><li>No Impact</li><li>Unknown</li></ul>
        impactToOrg:
          type: string
          description: Specifies the impact of this event to the Organization. These values can be configured via custom lists as these can be very specific to the company. The default list to choose from are - <ul><li>Global</li><li>National</li><li>Local</li></ul>
        locations:
          type: string
          description: Specifies the impact location of this event to the Organization’s operational geographies. These values can be configured via custom lists as these can be very specific to the company.
        multiple key value sets:
          type: string
          description: 'Specifies the set of individual actions to be taken during this event.Each action consists of - <ul><li>actionDate - the start date of this action in dd/mm/yyyy HH:MI:SS 24hr format </li><li>actionOwner - the individual (contact) responsible for this action’s execution</li><li>actionDetails - the detail description of this action</li></ul><p>An event can have a maximum of 10 action. So the action values are numbered. actionDate1, actionOwner1, actionDetails1, actionDate2, actionOwner2, actionDetails2 …actionDate10, actionOwner10, actionDetails10'
        Alias Fields:
          type: string
          description: 'The other (alias) name and title fields 1) otherFirstName, otherLastName, otherTitle'
      xml:
        name: event
        prefix: ns3
      x-tags:
        - Events
      title: Event
    import:
      type: object
      required:
        - resourceId
        - importType
        - importOptions
        - importMode
      properties:
        resourceId:
          type: string
          description: 'The resource identifier returned from the POST to /resources. Resource referred to must be a valid CSV, XML, or JSON file.'
          example: 4FBBC384BCE3DAABFE3
        importType:
          type: string
          description: This defines the resource that will be created through this import process.
          example: contact
        importOptions:
          $ref: '#/components/schemas/fieldMapping'
        importMode:
          type: string
          description: The type of contact import that is occurring.
          example: replace
      xml:
        name: import
        prefix: ns2
      x-tags:
        - Imports
      title: Import
    fieldMapping:
      type: object
      required:
        - firstName
        - lastName
        - workMobilePhone1
        - workCountry
        - timezone
      properties:
        firstName:
          type: string
          description: First Name of the Contact. Value of this field is used to map the field within the resource.
          example: firstName
        lastName:
          type: string
          description: Last Name of the Contact. Value of this field is used to map the field within the resource.
          example: lastname
        workMobilePhone1:
          type: string
          description: The mobile phone number of the Contact. Value of this field is used to map the field within the newly created resource.
          example: Mobile
        workCountry:
          type: string
          description: The country field of the contact. The value of this field is used to map to the field within the newly created contact.
          example: workCountry
        timezone:
          type: string
          description: The timezone field of the contact. The value of this field is used to map to the timezone field within the newly created contact.
          example: timezone
      xml:
        name: fieldMapping
      title: Field Mapping
    attachment:
      type: object
      description: |-
        Attachments can be of any type [e.g. PDF, images and documents], and the maximum size of all attached files combined is 10 MB

        Attachments must be provided in the payload of the message. URLs can be referenced in the email but will not be added as message attachments.
      x-examples:
        example:
          attachmentName: TestIcon.png
          attachmentDesc: TestIcon.png
          derefUri: iVBORw0KGgoAAAANSUhEUgAAABQAAAASCAIAAADUsmlHAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAAMvSURBVDhPTVT5S1RhFD3fezOOOePTXHKriWgjsogWC1TSMuuHIFqoX0KsIIgSWwiq/6FFU8MKK6KyXYSKpkUKR4QMSSpCLQpyxHHUZpztzdu63xub5vKWj/fu+c6599z3mMfjSU9P13UdZoiCaLfZYQWiUGKq1WrBLEBDOBpWNTWeQyEIwvT0NAsEAgROPKXFxceNbQOtv4ShkKCkaZZ5kYU1Sw6dqT0NMTkLBIbf7zf+xaOuJzgG4RmyPyP/Kwq/oWAYeT+R6gYOofnmlUQmLQjI6JQkifasu368KdCQWwFEwBiYQOIgiDBETDFIORh/iZ0De55cehgXQJIphce9d/ebJhuyV0P3QY9Cj/HDUKhseIPomP/CW2QYB42nSx+db76YUM9IusPhYHVM2g5Bpo5xNuIkZibCF8On0oGVjhWabmR8EBx5GDuHaItsy0zhzA6bo/H5ZSyDMQ1d4YQa0Sqc1hdAe3E7IYkqp9tiUcHGkXIQZ8+fm+k5uXK3/46YAV3mMMLEt/BHUJ1Vua9oH+WV9ayLyLpVhRYFkT8d4mUzRuI0DAcHmQngSLrGoBJ/GC/L31JSy/cm91ifXTcboYDJGLX+1kI6WS3AQFSRCUDvwhGEwubiD1yVLkLKWuxoT50kzGwab6Ru6HIsahpiwTybkwTLU9iUU1Ezf394CmuyV20p2kLg8mcbRHLLxGimLlWFFMpMc6TRFlx29aJqePBgx4M3u7tubb1dMXfjw6rHhOwb+/jhV3+qNtMFKspQEZnA+oxSPr9UdjgUllV59pHZhSUFI/We5AnMv5o7bvhsFu5f3DlmR7ATr/a+rtq2mVulqEqmlFlbUuv5MbqudW0C7PrhGpvwidRhIoyXqiHoRam/tGrT5n9Wmfcb9TfmBOf0DXy80H0h/uKU6yQRcqlmk+mji0RhbbN2XOpAygzF/9nmfp4oc4+4y6vLqRnuUTdsfNqYFRop/4JFw4t723qz52YlZpvPd/K30vm+03nAie1ADXAYOADsgHOXs/laix7RkzMJyJJ/BjQ09lQ7me8f9/cP9nsnvemzpOIFy3PzclkK0wyNgvDEHP8Z/AXQ58rAz69IBAAAAABJRU5ErkJggg==
      title: Attachment
      properties:
        attachmentName:
          type: string
          description: 'The name of the attachment, including the extension.'
          example: photo.jpeg
        derefUri:
          type: string
          description: The Base64 encoded value for the email attachment.
          example: iVBORw0KGgoAAAANSUhEUgAAAAUAAAAFCAYAAACNbyblAAAAHElEQVQI12P4//8/w38GIAXDIBKE0DHxgljNBAAO9TXL0Y4OHwAAAABJRU5ErkJggg==
        attachmentDesc:
          type: string
          description: A description for the attachment.
          example: My photo
      required:
        - attachmentName
        - derefUri
  parameters:
    X-Api-Key:
      name: X-Api-Key
      in: header
      required: true
      schema:
        type: string
      description: The API key for authentication.
    workspaceId:
      name: workspaceId
      in: path
      schema:
        type: string
        pattern: '^[A-F0-9]+'
        example: 9A4C5521FFC7B15B
      description: The identifier for the workspace.
      required: true
    limit:
      name: limit
      in: query
      required: false
      schema:
        type: number
        default: 20
        maximum: 20
      description: The number of records to be returned.
    offset:
      name: offset
      in: query
      required: false
      schema:
        type: number
        default: 0
      description: The record number to start returning from.
  responses: {}
  headers:
    Access-Control-Allow-Origin:
      description: Origins allowed to perform cross-origin requests.
      required: true
      schema:
        type: string
        enum:
          - '*'
    Content-Length:
      description: Length of the response content.
      required: true
      example: 4111
      schema:
        type: number
    Message-Content-Type:
      description: Message content mime type.
      required: true
      schema:
        type: string
        enum:
          - application/vnd.whispir.message-v1+json
          - application/vnd.whispir.message-v1+xml
    Message-Status-Content-Type:
      description: Message status content mime type.
      required: true
      schema:
        type: string
        enum:
          - application/vnd.whispir.messagestatus-v1+json
          - application/vnd.whispir.messagestatus-v1+xml
    Message-Response-Content-Type:
      description: Message response content mime type.
      required: true
      schema:
        type: string
        enum:
          - application/vnd.whispir.messageresponse-v1+json
          - application/vnd.whispir.messageresponse-v1+xml
