{{>licenseInfo}}import localVarRequest from 'request';

/* tslint:disable:no-unused-locals */
{{#imports}}
import { {{classname}}, {{classname}}Write } from '{{import}}';
{{/imports}}
import { ObjectSerializer, Interceptor } from '../model/models';
import { HttpError, RequestFile, ApiResponse, CreateResponse, ApiConfig, RequestOptions } from './apis';

// ===============================================
// This file is autogenerated - Please do not edit
// ===============================================
{{#operations}}
{{#description}}
/**
* {{&description}}
*/
{{/description}}

{{#operation}}
{{^vendorExtensions.x-internal}}
type {{operationIdCamelCase}}Params = {
    {{#allParams}}
    {{^isBodyParam}}
    {{#vendorExtensions}}
    {{^x-isApiKey}}
    {{^x-isContentType}}
    {{#description}}
    /**
    * {{{.}}}
    */{{/description}}
    {{paramName}}{{#required}}{{#defaultValue}}?{{/defaultValue}}{{/required}}{{^required}}{{#defaultValue}}?{{/defaultValue}}{{/required}}{{^required}}{{^defaultValue}}?{{/defaultValue}}{{/required}}: {{{dataType}}};
    {{/x-isContentType}}
    {{/x-isApiKey}}
    {{/vendorExtensions}}
    {{/isBodyParam}}
    {{/allParams}}
}{{#bodyParam}} & {{baseType}}Write{{/bodyParam}};

{{/vendorExtensions.x-internal}}
{{/operation}}

export class {{classname}} {
    protected defaultHeaders: any = {};
    protected useQuerystring: boolean = false;
    protected interceptors: Interceptor[] = [];
    protected host: string;

    constructor(config: ApiConfig) {
        this.defaultHeaders = config.defaultHeaders;
        this.host = config.host;
    }

    public addInterceptor(interceptor: Interceptor) {
        this.interceptors.push(interceptor);
    }

{{#operation}}
{{^vendorExtensions.x-internal}}
    /**
     * {{&notes}}
     {{#summary}}
     * @summary {{&summary}}
     {{/summary}}
     {{#allParams}}
     * @param {{paramName}} {{description}}
     {{/allParams}}
     */
    public async {{#vendorExtensions}}{{x-sdkOperation}}{{/vendorExtensions}}(
        params?: {{operationIdCamelCase}}Params,
        options?: RequestOptions): Promise<{{#vendorExtensions}}{{#x-isPost}}CreateResponse{{/x-isPost}}{{^x-isPost}}ApiResponse{{/x-isPost}}{{/vendorExtensions}}{{#returnType}}<{{returnType}}>{{/returnType}}> {
        const {
            {{#allParams}}
            {{^isBodyParam}}
            {{#vendorExtensions}}
            {{^x-isApiKey}}
            {{^x-isContentType}}
            {{paramName}}{{#defaultValue}} = {{{defaultValue}}}{{/defaultValue}},
            {{/x-isContentType}}
            {{/x-isApiKey}}
            {{/vendorExtensions}}
            {{/isBodyParam}}
            {{/allParams}}
            {{#bodyParam}}
            ...{{paramName}}
            {{/bodyParam}}
        } = params || {};

        const localVarPath = this.host + '{{{path}}}'{{#pathParams}}
            .replace('{' + '{{baseName}}' + '}', encodeURIComponent(String({{paramName}}))){{/pathParams}};
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);

        let localVarFormParams: any = {};
{{#queryParams}}
        if ({{paramName}} !== undefined) {
            localVarQueryParameters['{{baseName}}'] = ObjectSerializer.serialize({{paramName}}, "{{{dataType}}}");
        }
{{/queryParams}}
{{#headerParams}}
        {{#vendorExtensions}}
        {{^x-isApiKey}}
        {{^x-isContentType}}
        localVarHeaderParams['{{baseName}}'] = {{paramName}} || localVarHeaderParams['{{baseName}}'];
        {{/x-isContentType}}
        {{/x-isApiKey}}
        {{#x-isContentType}}
        localVarHeaderParams['{{baseName}}'] = {{{defaultValue}}};
        {{/x-isContentType}}
        {{/vendorExtensions}}
{{/headerParams}}
        (<any>Object).assign(localVarHeaderParams, options?.headers);

        let localVarUseFormData = false;

{{#formParams}}
        if ({{paramName}} !== undefined) {
            {{#isFile}}
            localVarFormParams['{{baseName}}'] = {{paramName}};
            {{/isFile}}
            {{^isFile}}
            localVarFormParams['{{baseName}}'] = ObjectSerializer.serialize({{paramName}}, "{{{dataType}}}");
            {{/isFile}}
        }
{{#isFile}}
        localVarUseFormData = true;
{{/isFile}}

{{/formParams}}
        let localVarRequestOptions: localVarRequest.Options = {
            method: '{{httpMethod}}',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this.useQuerystring,
{{^isResponseFile}}
            json: true,
{{/isResponseFile}}
{{#isResponseFile}}
            encoding: null,
{{/isResponseFile}}
{{#bodyParam}}
            body: ObjectSerializer.serialize({{paramName}}, "{{{dataType}}}")
{{/bodyParam}}
        };

        let authenticationPromise = Promise.resolve();

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }

            return new Promise((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            {{#returnType}}
                            body = ObjectSerializer.deserialize(body, "{{{.}}}");
                            {{/returnType}}
                            {{#vendorExtensions}}{{#x-isPost}}
                            // Special case to extract the resource identifier from the `Location` header.
                            const checkLocation = response?.headers?.location?.match(/\/([^\/]+)\/?$/);
                            let id = (checkLocation && checkLocation[1]) ? checkLocation[1] : undefined;
                            {{/x-isPost}}{{/vendorExtensions}}
                            resolve({ lastResponse: response.toJSON(),{{#vendorExtensions}}{{#x-isPost}} id,{{/x-isPost}}{{/vendorExtensions}} ...body });
                        } else {
                            reject(new HttpError(body));
                        }
                    }
                });
            });
        });
    }
{{/vendorExtensions.x-internal}}
{{/operation}}
}
{{/operations}}
