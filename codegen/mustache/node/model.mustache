{{>licenseInfo}}{{#models}}
{{#model}}
import { RequestFile } from './models';
{{#tsImports}}
import { {{classname}}, {{classname}}Write } from '{{filename}}';
{{/tsImports}}


export type {{classname}}Write = {
{{#vars}}
{{^isReadOnly}}
{{#description}}
    /**
    * {{{.}}}
    */
{{/description}}
    '{{name}}'{{^required}}?{{/required}}: {{#isEnum}}{{#allowableValues}}{{#values}}'{{.}}'{{^-last}} | {{/-last}}{{/values}}{{/allowableValues}}{{/isEnum}}{{^isEnum}}{{#isPrimitiveType}}{{{dataType}}}{{/isPrimitiveType}}{{^isPrimitiveType}}{{{dataType}}}Write{{/isPrimitiveType}}{{#isNullable}} | null{{/isNullable}}{{/isEnum}};
{{/isReadOnly}}
{{/vars}}
}

{{#description}}
/**
* {{{.}}}
*/
{{/description}}
{{^isEnum}}
export class {{classname}} {{#parent}}extends {{{.}}} {{/parent}}{
{{#vars}}
{{^isWriteOnly}}
{{#description}}
    /**
    * {{{.}}}
    */
{{/description}}
    '{{name}}': {{#isEnum}}{{#allowableValues}}{{#values}}'{{.}}'{{^-last}} | {{/-last}}{{/values}}{{/allowableValues}}{{/isEnum}}{{^isEnum}}{{{dataType}}}{{#isNullable}} | null{{/isNullable}}{{/isEnum}};
{{/isWriteOnly}}
{{/vars}}

    {{#discriminator}}
    static discriminator: string | undefined = "{{discriminatorName}}";
    {{/discriminator}}
    {{^discriminator}}
    static discriminator: string | undefined = undefined;
    {{/discriminator}}

    {{^isArray}}
    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {{#vars}}
        {
            "name": "{{name}}",
            "baseName": "{{baseName}}",
            "type": "{{{dataType}}}"
        }{{^-last}},
        {{/-last}}
        {{/vars}}
    ];

    static getAttributeTypeMap() {
        {{#parent}}
        return super.getAttributeTypeMap().concat({{classname}}.attributeTypeMap);
        {{/parent}}
        {{^parent}}
        return {{classname}}.attributeTypeMap;
        {{/parent}}
    }
    {{/isArray}}
}

{{/isEnum}}
{{#isEnum}}
export enum {{classname}} {
    {{#allowableValues}}
    {{#enumVars}}
    {{name}} = <any> {{{value}}}{{^-last}},{{/-last}}
    {{/enumVars}}
    {{/allowableValues}}
}
{{/isEnum}}
{{/model}}
{{/models}}
