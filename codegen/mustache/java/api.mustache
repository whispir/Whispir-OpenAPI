package {{package}};

import {{invokerPackage}}.ApiCallback;
import {{invokerPackage}}.ApiClient;
import {{invokerPackage}}.ApiException;
import {{invokerPackage}}.ApiResponse;
import {{invokerPackage}}.Configuration;
import {{invokerPackage}}.Pair;
import {{invokerPackage}}.ProgressRequestBody;
import {{invokerPackage}}.ProgressResponseBody;
import {{invokerPackage}}.auth.ApiKeyAuth;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;
{{#imports}}import {{import}};
{{/imports}}

import java.lang.reflect.Type;
{{^fullJavaUtil}}
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
{{/fullJavaUtil}}
import javax.ws.rs.core.GenericType;
import java.net.URI;
import java.util.stream.Collectors;

{{#operations}}
public class {{classname}} {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;
    public {{classname}}() {
        this(Configuration.getDefaultApiClient());
    }

    public {{classname}}(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    {{#operation}}
    private okhttp3.Call {{operationId}}Call({{#allParams}}{{{dataType}}} {{paramName}}, {{/allParams}}final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] { {{#servers}}"{{{url}}}"{{^-last}}, {{/-last}}{{/servers}} };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = {{#bodyParam}}{{paramName}}{{/bodyParam}}{{^bodyParam}}null{{/bodyParam}};

        // create path and map variables
        {{^dynamicOperations}}
        String localVarPath = "{{{path}}}"{{#pathParams}}
            .replace("{" + "{{baseName}}" + "}", localVarApiClient.escapeString({{#collectionFormat}}localVarApiClient.collectionPathParameterToString("{{{collectionFormat}}}", {{{paramName}}}){{/collectionFormat}}{{^collectionFormat}}{{{paramName}}}.toString(){{/collectionFormat}})){{/pathParams}};
        {{/dynamicOperations}}
        {{#dynamicOperations}}
        ApiOperation apiOperation = localVarApiClient.getOperationLookupMap().get("{{{operationId}}}");
        if (apiOperation == null) {
            throw new ApiException("Operation not found in OAS");
        }
        Operation operation = apiOperation.getOperation();
        String localVarPath = apiOperation.getPath();
        Map<String, Object> paramMap = new HashMap<>();
        {{#allParams}}
            {{^isFormParam}}
            {{^isBodyParam}}
        paramMap.put("{{baseName}}", {{paramName}});
            {{/isBodyParam}}
            {{/isFormParam}}
        {{/allParams}}
        {{/dynamicOperations}}

        {{javaUtilPrefix}}List<Pair> localVarQueryParams = new {{javaUtilPrefix}}ArrayList<Pair>();
        {{javaUtilPrefix}}List<Pair> localVarCollectionQueryParams = new {{javaUtilPrefix}}ArrayList<Pair>();
        {{javaUtilPrefix}}Map<String, String> localVarHeaderParams = new {{javaUtilPrefix}}HashMap<String, String>();
        {{javaUtilPrefix}}Map<String, String> localVarCookieParams = new {{javaUtilPrefix}}HashMap<String, String>();
        {{javaUtilPrefix}}Map<String, Object> localVarFormParams = new {{javaUtilPrefix}}HashMap<String, Object>();

        {{#formParams}}
        if ({{paramName}} != null) {
            localVarFormParams.put("{{baseName}}", {{paramName}});
        }

        {{/formParams}}
        {{^dynamicOperations}}
        {{#queryParams}}
        if ({{paramName}} != null) {
            {{#collectionFormat}}localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("{{{.}}}", {{/collectionFormat}}{{^collectionFormat}}localVarQueryParams.addAll(localVarApiClient.parameterToPair({{/collectionFormat}}"{{baseName}}", {{paramName}}));
        }

        {{/queryParams}}
        {{#headerParams}}
        if ({{paramName}} != null) {
            localVarHeaderParams.put("{{baseName}}", localVarApiClient.parameterToString({{paramName}}));
        }

        {{/headerParams}}
        {{#cookieParams}}
        if ({{paramName}} != null) {
            localVarCookieParams.put("{{baseName}}", localVarApiClient.parameterToString({{paramName}}));
        }

        {{/cookieParams}}
        {{/dynamicOperations}}
        {{#dynamicOperations}}
        localVarPath = localVarApiClient.fillParametersFromOperation(operation, paramMap, localVarPath, localVarQueryParams, localVarCollectionQueryParams, localVarHeaderParams, localVarCookieParams);

        {{/dynamicOperations}}
        final String[] localVarAccepts = {
            {{#produces}}
            "{{{mediaType}}}"{{^-last}},{{/-last}}
            {{/produces}}
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            {{#consumes}}
            "{{{mediaType}}}"{{^-last}},{{/-last}}
            {{/consumes}}
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { {{#authMethods}}"{{name}}"{{^-last}}, {{/-last}}{{/authMethods}} };
        return localVarApiClient.buildCall(basePath, localVarPath, {{^dynamicOperations}}"{{httpMethod}}"{{/dynamicOperations}}{{#dynamicOperations}}apiOperation.getMethod(){{/dynamicOperations}}, localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    {{#isDeprecated}}
    @Deprecated
    {{/isDeprecated}}
    @SuppressWarnings("rawtypes")
    private okhttp3.Call {{operationId}}ValidateBeforeCall({{#allParams}}{{{dataType}}} {{paramName}}, {{/allParams}}final ApiCallback _callback) throws ApiException {
        {{#allParams}}
        {{#required}}
        // verify the required parameter '{{paramName}}' is set
        if ({{paramName}} == null) {
            throw new ApiException("Missing the required parameter '{{paramName}}' when calling {{operationId}}(Async)");
        }

        {{/required}}
        {{/allParams}}
        return {{operationId}}Call({{#allParams}}{{paramName}}, {{/allParams}}_callback);
    }
    ApiResponse<{{#returnType}}{{{returnType}}}{{/returnType}}{{^returnType}}Void{{/returnType}}> {{operationId}}WithHttpInfo({{#allParams}}{{{dataType}}} {{paramName}}{{^-last}}, {{/-last}}{{/allParams}}) throws ApiException {
        okhttp3.Call localVarCall = {{operationId}}ValidateBeforeCall({{#allParams}}{{paramName}}, {{/allParams}}null);
        {{^returnType}}
        return localVarApiClient.execute(localVarCall);
        {{/returnType}}
        {{#returnType}}
        {{#errorObjectType}}
        try {
            Type localVarReturnType = new TypeToken<{{{returnType}}}>(){}.getType();
            return localVarApiClient.execute(localVarCall, localVarReturnType);
        } catch (ApiException e) {
            e.setErrorObject(localVarApiClient.getJSON().getGson().fromJson(e.getResponseBody(), new TypeToken<{{{errorObjectType}}}>(){}.getType()));
            throw e;
        }
        {{/errorObjectType}}
        {{^errorObjectType}}
        Type localVarReturnType = new TypeToken<{{{returnType}}}>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
        {{/errorObjectType}}
        {{/returnType}}
    }

    private okhttp3.Call {{operationId}}Async({{#allParams}}{{{dataType}}} {{paramName}}, {{/allParams}}final ApiCallback<{{{returnType}}}{{^returnType}}Void{{/returnType}}> _callback) throws ApiException {
        okhttp3.Call localVarCall = {{operationId}}ValidateBeforeCall({{#allParams}}{{paramName}}, {{/allParams}}_callback);
        {{#returnType}}Type localVarReturnType = new TypeToken<{{{returnType}}}>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);{{/returnType}}{{^returnType}}localVarApiClient.executeAsync(localVarCall, _callback);{{/returnType}}
        return localVarCall;
    }

    public static class {{operationIdCamelCase}}Params {
        {{#requiredParams}}
        {{^vendorExtensions.x-isApiKey}}
        {{^vendorExtensions.x-isContentType}}
        {{! list all required "query", "path", "header" params except for "x-ApiKey", "contentType" and "accept"}}
        private {{{dataType}}} {{paramName}};
        {{/vendorExtensions.x-isContentType}}
        {{/vendorExtensions.x-isApiKey}}
        {{! Listing body params if there are any}}
        {{#isBodyParam}}      
        {{#vars}}
        {{^isReadOnly}}
        private {{{dataType}}} {{baseName}};
        {{/isReadOnly}}
        {{/vars}}
        {{/isBodyParam}}
        {{/requiredParams}}
        {{! Listing optional params if there are any}}
        {{#optionalParams}}
        private {{{dataType}}} {{paramName}};
        {{/optionalParams}}

        private {{operationIdCamelCase}}Params(
            {{#requiredParams}}
            {{^vendorExtensions.x-isApiKey}}
            {{^vendorExtensions.x-isContentType}}
            {{{dataType}}} {{paramName}}{{^-last}},{{/-last}}{{#-last}}{{#hasOptionalParams}}{{#hasBodyParam}},{{/hasBodyParam}}{{/hasOptionalParams}}{{#hasOptionalParams}}{{^hasBodyParam}},{{/hasBodyParam}}{{/hasOptionalParams}}{{^hasOptionalParams}}{{#hasBodyParam}},{{/hasBodyParam}}{{/hasOptionalParams}}{{/-last}}
            {{/vendorExtensions.x-isContentType}}
            {{/vendorExtensions.x-isApiKey}}
            {{#isBodyParam}}
            {{#vars}}
            {{^isReadOnly}}
            {{{dataType}}} {{baseName}}{{^-last}},{{/-last}}
            {{/isReadOnly}}
            {{/vars}}
            {{/isBodyParam}}
            {{/requiredParams}}
            {{#optionalParams}}
            {{{dataType}}} {{paramName}}{{^-last}},{{/-last}}
            {{/optionalParams}}
        ){
            {{#requiredParams}}
            {{^vendorExtensions.x-isApiKey}}    
            {{^vendorExtensions.x-isContentType}}
            this.{{paramName}} = {{paramName}};
            {{/vendorExtensions.x-isContentType}}
            {{/vendorExtensions.x-isApiKey}}
            {{#isBodyParam}}
            {{#vars}}
            {{^isReadOnly}}
            this.{{baseName}} = {{baseName}};
            {{/isReadOnly}}
            {{/vars}}
            {{/isBodyParam}}
            {{/requiredParams}}
            {{#optionalParams}}
            this.{{paramName}} = {{paramName}};
            {{/optionalParams}}
        }
            {{#requiredParams}}
            {{^vendorExtensions.x-isApiKey}}
            {{^vendorExtensions.x-isContentType}}
            public {{{dataType}}} get{{#lambda.titlecase}}{{paramName}}{{/lambda.titlecase}}() {
                return {{paramName}};
            }
            {{/vendorExtensions.x-isContentType}}
            {{/vendorExtensions.x-isApiKey}}
            {{#isBodyParam}}
            {{#vars}}
            {{#isEnum}}
            public enum {{datatypeWithEnum}} {
            {{#allowableValues}}
            {{#enumVars}}
            {{{name}}}({{{value}}}){{^-last}},
            {{/-last}}{{#-last}};{{/-last}}
            {{/enumVars}}
            {{^enumVars}}
            {{#values}}
            {{#lambda.uppercase}}{{#lambda.snakecase}}{{{.}}}{{/lambda.snakecase}}{{/lambda.uppercase}}("{{{.}}}"){{^-last}},
            {{/-last}}{{#-last}};{{/-last}}
            {{/values}}
            {{/enumVars}}
            {{/allowableValues}}
                private {{dataType}} value;
                {{datatypeWithEnum}}({{dataType}} value){
                    this.value = value;
                }

                public {{dataType}} getValue() {
                    return value;
                }
                
                @Override
                public {{dataType}} toString() {
                    return {{dataType}}.valueOf(value);
                }

                public static {{datatypeWithEnum}} fromValue({{dataType}} value) {
                    for ({{datatypeWithEnum}} b : {{datatypeWithEnum}}.values()) {
                        if (b.value.equals(value)) {
                            return b;
                        }
                    }
                    throw new IllegalArgumentException("Unexpected value '" + value + "'");
                }

            }
            {{/isEnum}}              
            {{^isReadOnly}}
            public {{{dataType}}} {{getter}}() {
                return {{baseName}};
            }
            {{/isReadOnly}}
            {{/vars}}
            {{/isBodyParam}}
            {{/requiredParams}}
            {{#optionalParams}}
            public {{{dataType}}} get{{#lambda.titlecase}}{{paramName}}{{/lambda.titlecase}}() {
                return {{paramName}};
            }
            {{/optionalParams}}

        public static Builder builder() {
            return new Builder();
        }

        public static class Builder {
            {{#requiredParams}}
            {{^vendorExtensions.x-isApiKey}}
            {{^vendorExtensions.x-isContentType}}
            private {{{dataType}}} {{paramName}};
            {{/vendorExtensions.x-isContentType}}
            {{/vendorExtensions.x-isApiKey}}
            {{#isBodyParam}}
            {{#vars}}
            {{^isReadOnly}}
            private {{{dataType}}} {{baseName}};
            {{/isReadOnly}}
            {{/vars}}
            {{/isBodyParam}}
            {{/requiredParams}}
            {{#optionalParams}}
            private {{{dataType}}} {{paramName}};
            {{/optionalParams}}

            public {{operationIdCamelCase}}Params build() {
                return new {{operationIdCamelCase}}Params(
                    {{#requiredParams}}
                    {{^vendorExtensions.x-isApiKey}}    
                    {{^vendorExtensions.x-isContentType}}
                    {{paramName}}{{^-last}},{{/-last}}{{#-last}}{{#hasOptionalParams}}{{#hasBodyParam}},{{/hasBodyParam}}{{/hasOptionalParams}}{{#hasOptionalParams}}{{^hasBodyParam}},{{/hasBodyParam}}{{/hasOptionalParams}}{{^hasOptionalParams}}{{#hasBodyParam}},{{/hasBodyParam}}{{/hasOptionalParams}}{{/-last}}
                    {{/vendorExtensions.x-isContentType}}
                    {{/vendorExtensions.x-isApiKey}}
                    {{#isBodyParam}}
                    {{#vars}}
                    {{^isReadOnly}}
                    {{baseName}}{{^-last}},{{/-last}}
                    {{/isReadOnly}}
                    {{/vars}}
                    {{/isBodyParam}}
                    {{/requiredParams}}
                    {{#optionalParams}}
                    {{paramName}}{{^-last}},{{/-last}}
                    {{/optionalParams}}
                );
            }

            {{#requiredParams}}
            {{^vendorExtensions.x-isApiKey}}
            {{^vendorExtensions.x-isContentType}}
            public Builder set{{#lambda.titlecase}}{{paramName}}{{/lambda.titlecase}}({{{dataType}}} {{paramName}}) {
                this.{{paramName}} = {{paramName}};
                return this;
            }
            {{/vendorExtensions.x-isContentType}}
            {{/vendorExtensions.x-isApiKey}}
            {{#isBodyParam}}
            {{#vars}}
            {{^isReadOnly}}
            public Builder {{setter}}({{#isEnum}}{{enumName}}{{/isEnum}}{{^isEnum}}{{{dataType}}}{{/isEnum}} {{baseName}}) {
                {{#isEnum}}
                this.{{baseName}} = {{baseName}}.getValue();
                {{/isEnum}}
                {{^isEnum}}
                this.{{baseName}} = {{baseName}};
                {{/isEnum}}
                return this;
            }
            {{/isReadOnly}}
            {{/vars}}
            {{/isBodyParam}}
            {{/requiredParams}}
            {{#optionalParams}}
            public Builder set{{#lambda.titlecase}}{{paramName}}{{/lambda.titlecase}}({{{dataType}}} {{paramName}}) {
                this.{{paramName}} = {{paramName}};
                return this;
            }
            {{/optionalParams}}
        }
        
        {{#requiredParams}}
        {{#isBodyParam}}
{{>api_recursion}}
        {{/isBodyParam}}
        {{/requiredParams}}
    }

    public class {{operationIdCamelCase}}Request {
        {{#requiredParams}}
        private final {{{dataType}}} {{paramName}};
        {{/requiredParams}}
        {{#optionalParams}}
        private {{{dataType}}} {{paramName}};
        {{/optionalParams}}

        private {{operationIdCamelCase}}Request({{#requiredParams}}{{{dataType}}} {{paramName}}{{^-last}}, {{/-last}}{{/requiredParams}}) {
            {{#requiredParams}}
            this.{{paramName}} = {{paramName}};
            {{/requiredParams}}
        }

        {{#optionalParams}}
        /**
         * Set {{paramName}}
         * @param {{paramName}} {{description}} (optional{{^isContainer}}{{#defaultValue}}, default to {{.}}{{/defaultValue}}{{/isContainer}})
         * @return API{{operationId}}Request
         */
        public {{operationIdCamelCase}}Request {{paramName}}({{{dataType}}} {{paramName}}) {
            this.{{paramName}} = {{paramName}};
            return this;
        }

        {{/optionalParams}}
        /**
         * Build call for {{operationId}}
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         */
        {{#isDeprecated}}
        @Deprecated
        {{/isDeprecated}}
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return {{operationId}}Call({{#allParams}}{{paramName}}, {{/allParams}}_callback);
        }

        /**
         * Execute {{operationId}} request{{#returnType}}
         * @return {{.}}{{/returnType}}
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         */
        {{#isDeprecated}}
        @Deprecated
        {{/isDeprecated}}
        {{^vendorExtensions.x-streaming}}
        public {{{returnType}}}{{^returnType}}void{{/returnType}} execute() throws ApiException {
            {{#returnType}}ApiResponse<{{{.}}}> localVarResp = {{/returnType}}{{operationId}}WithHttpInfo({{#allParams}}{{paramName}}{{^-last}}, {{/-last}}{{/allParams}});{{#returnType}}
            return localVarResp.getData();{{/returnType}}
        }
        {{/vendorExtensions.x-streaming}}
        {{#vendorExtensions.x-streaming}}
        public InputStream execute() throws ApiException {
            return {{operationId}}WithHttpInfo({{#allParams}}{{paramName}}{{^-last}}, {{/-last}}{{/allParams}});
        }
        {{/vendorExtensions.x-streaming}}

        /**
         * Execute {{operationId}} request with HTTP info returned
         * @return ApiResponse&lt;{{returnType}}{{^returnType}}Void{{/returnType}}&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         */
        {{#isDeprecated}}
        @Deprecated
        {{/isDeprecated}}
        {{^vendorExtensions.x-streaming}}
        public ApiResponse<{{{returnType}}}{{^returnType}}Void{{/returnType}}> executeWithHttpInfo() throws ApiException {
            return {{operationId}}WithHttpInfo({{#allParams}}{{paramName}}{{^-last}}, {{/-last}}{{/allParams}});
        }
        {{/vendorExtensions.x-streaming}}
        {{#vendorExtensions.x-streaming}}
        public InputStream executeWithHttpInfo() throws ApiException {
            return {{operationId}}WithHttpInfo({{#allParams}}{{paramName}}{{^-last}}, {{/-last}}{{/allParams}});
        }
        {{/vendorExtensions.x-streaming}}

        /**
         * Execute {{operationId}} request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         */
        {{#isDeprecated}}
        @Deprecated
        {{/isDeprecated}}
        public okhttp3.Call executeAsync(final ApiCallback<{{{returnType}}}{{^returnType}}Void{{/returnType}}> _callback) throws ApiException {
            return {{operationId}}Async({{#allParams}}{{paramName}}, {{/allParams}}_callback);
        }
    }

    /**
     * {{summary}}
     * @param params The param instance required to create {{operationIdCamelCase}}Request
     * @return {{{returnType}}}{{^returnType}}void{{/returnType}}
     */

    public {{{returnType}}}{{^returnType}}void{{/returnType}} {{vendorExtensions.x-sdkOperation}}({{operationIdCamelCase}}Params params) throws ApiException {
        // retrieving apiKeyAuth value from apiClient
        ApiKeyAuth apiKeyAuth = (ApiKeyAuth) this.localVarApiClient.getAuthentication("ApiKeyAuth");
        String xApiKey = apiKeyAuth.getApiKey();
        
        if(xApiKey == null) {
            throw new ApiException("Missing the required parameter 'xApiKey'");
        }

        {{#requiredParams}}
        {{#vendorExtensions.x-isContentType}}
        {{{dataType}}} {{paramName}} = "{{defaultValue}}";
        {{/vendorExtensions.x-isContentType}}

        {{^isBodyParam}}
        {{^vendorExtensions.x-isApiKey}}
        {{^vendorExtensions.x-isContentType}}
        {{{dataType}}} {{paramName}} = params.get{{#lambda.titlecase}}{{paramName}}{{/lambda.titlecase}}();

        if({{paramName}} == null || {{paramName}}.isEmpty()) {
            throw new ApiException("Missing the required parameter '{{paramName}}'");
        }
        {{/vendorExtensions.x-isContentType}}
        {{/vendorExtensions.x-isApiKey}}
        {{/isBodyParam}}
        {{#isBodyParam}}
        // Constructing '{{dataType}}' from '{{operationIdCamelCase}}Params' instance passed
        {{{dataType}}} {{paramName}} = new {{dataType}}();
        {{#vars}}
        {{^isReadOnly}}
        {{^isPrimitiveType}}
        {{#isArray}}
        List<Object> {{baseName}} = new ArrayList<Object>(params.{{getter}}());
        List<{{modelPackage}}.{{{complexType}}}> {{baseName}}Value = {{baseName}}.stream()
            .map(e -> ({{modelPackage}}.{{{complexType}}}) e).collect(Collectors.toList());
        {{/isArray}}
        {{^isUri}}
        {{^isArray}}
        {{^isNumber}}
        Object {{baseName}}Value = params.{{getter}}();
        {{/isNumber}}
        {{/isArray}}
        {{/isUri}}
        {{#isNumber}}
        {{{dataType}}} {{baseName}}Value = params.{{getter}}();
        {{/isNumber}}
        {{#isUri}}
        {{{dataType}}} {{baseName}}Value = params.{{getter}}();
        {{/isUri}}
        {{/isPrimitiveType}}
        {{#isPrimitiveType}}
        {{{dataType}}} {{baseName}}Value = params.{{getter}}();
        {{/isPrimitiveType}}
        {{#required}}
        if({{baseName}}Value == null) {
            throw new ApiException("Missing the required property value of '{{baseName}}'");
        }
        {{/required}}
        {{paramName}}.set{{#lambda.titlecase}}{{baseName}}{{/lambda.titlecase}}({{#isModel}}({{modelPackage}}.{{{complexType}}}) {{/isModel}}{{baseName}}Value);

        {{/isReadOnly}}
        {{/vars}}
        {{/isBodyParam}}
        {{/requiredParams}}
        {{operationIdCamelCase}}Request request = new {{operationIdCamelCase}}Request({{#requiredParams}}{{paramName}}{{^-last}}, {{/-last}}{{/requiredParams}});

        // Ensure to include all of the 'optionalParams' that are passed
        {{#optionalParams}}
        {{! ensure to include all of the optionalParams that get passed in }}
        if(params.{{paramName}} != null){
            {{{dataType}}} {{paramName}} = params.get{{#lambda.titlecase}}{{paramName}}{{/lambda.titlecase}}();
            request.{{paramName}}({{paramName}});
        }
        {{/optionalParams}}

        {{#returnType}}return {{/returnType}}request.execute();
    }
    {{/operation}}
}
{{/operations}}
