/* tslint:disable:no-unused-locals */
import { ZObject, Bundle, HttpRequestOptions } from 'zapier-platform-core'
{{#imports}}
import { {{classname}}, {{classname}}Write } from '{{import}}';
{{/imports}}
import { ObjectSerializer } from '../model/models';

// ===============================================
// This file is autogenerated - Please do not edit
// ===============================================
{{#operations}}

{{#operation}}
type {{operationIdCamelCase}}Params = {
    {{#allParams}}
    {{^isBodyParam}}
    {{#vendorExtensions}}
    {{^x-isApiKey}}
    {{^x-isContentType}}
    {{#description}}
    /**
    * {{{.}}}
    */{{/description}}
    {{paramName}}{{#required}}{{#defaultValue}}?{{/defaultValue}}{{/required}}{{^required}}{{#defaultValue}}?{{/defaultValue}}{{/required}}{{^required}}{{^defaultValue}}?{{/defaultValue}}{{/required}}: {{{dataType}}};
    {{/x-isContentType}}
    {{/x-isApiKey}}
    {{/vendorExtensions}}
    {{/isBodyParam}}
    {{/allParams}}
}{{#bodyParam}} & {{baseType}}Write{{/bodyParam}};

{{/operation}}

{{#operation}}
export const {{operationId}} = {
  key: '{{classVarName}}',
  noun: '{{baseName}}',

  display: {
    label: '{{summary}}',
    description: '{{notes}}'
  },

  operation: {
    inputFields: [
      {key: 'repo', label:'Repo', required: true, dynamic: 'repo.full_name.full_name'},
      {key: 'title', label:'Title', required: true},
      {key: 'body', label:'Body', required: false}
    ],
    perform: (z: ZObject, bundle: Bundle<{{operationIdCamelCase}}Params>) => {
        const {
            {{#allParams}}
            {{^isBodyParam}}
            {{#vendorExtensions}}
            {{^x-isApiKey}}
            {{^x-isContentType}}
            {{paramName}}{{#defaultValue}} = {{{defaultValue}}}{{/defaultValue}},
            {{/x-isContentType}}
            {{/x-isApiKey}}
            {{/vendorExtensions}}
            {{/isBodyParam}}
            {{/allParams}}
            {{#bodyParam}}
            ...{{paramName}}
            {{/bodyParam}}
        } = bundle.inputData || {};

        const localVarPath = bundle.authData.host + '{{{path}}}'{{#pathParams}}
            .replace('{' + '{{baseName}}' + '}', encodeURIComponent(String({{paramName}}))){{/pathParams}};
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, bundle.authData.headers);

        let localVarFormParams: any = {};
{{#queryParams}}
        if ({{paramName}} !== undefined) {
            localVarQueryParameters['{{baseName}}'] = ObjectSerializer.serialize({{paramName}}, "{{{dataType}}}");
        }
{{/queryParams}}
{{#headerParams}}
        {{#vendorExtensions}}
        {{^x-isApiKey}}
        {{^x-isContentType}}
        localVarHeaderParams['{{baseName}}'] = {{paramName}} || localVarHeaderParams['{{baseName}}'];
        {{/x-isContentType}}
        {{/x-isApiKey}}
        {{#x-isContentType}}
        localVarHeaderParams['{{baseName}}'] = {{{defaultValue}}};
        {{/x-isContentType}}
        {{/vendorExtensions}}
{{/headerParams}}

        let localVarUseFormData = false;

{{#formParams}}
        if ({{paramName}} !== undefined) {
            {{#isFile}}
            localVarFormParams['{{baseName}}'] = {{paramName}};
            {{/isFile}}
            {{^isFile}}
            localVarFormParams['{{baseName}}'] = ObjectSerializer.serialize({{paramName}}, "{{{dataType}}}");
            {{/isFile}}
        }
{{#isFile}}
        localVarUseFormData = true;
{{/isFile}}

{{/formParams}}
        let localVarRequestOptions = {
            method: '{{httpMethod}}' as const,
            {{! qs: localVarQueryParameters, }}
            headers: localVarHeaderParams,
            url: localVarPath,
{{^isResponseFile}}
            {{! json: true, }}
{{/isResponseFile}}
{{#isResponseFile}}
            encoding: null,
{{/isResponseFile}}
{{#bodyParam}}
            body: ObjectSerializer.serialize({{paramName}}, "{{{dataType}}}")
{{/bodyParam}}
        };

        const responsePromise = z.request(localVarRequestOptions);
        return responsePromise
            .then(response => {
                if (response.status && response.status >= 200 && response.status <= 299) {
                        let body = {};
                        {{#returnType}}
                        body = ObjectSerializer.deserialize(response.data, "{{{.}}}");
                        {{/returnType}}
                        {{#vendorExtensions}}{{#x-isPost}}
                        // Special case to extract the resource identifier from the `Location` header.
                        const checkLocation = response?.headers?.location?.match(/\/([^\/]+)\/?$/);
                        let id = (checkLocation && checkLocation[1]) ? checkLocation[1] : undefined;
                        {{/x-isPost}}{{/vendorExtensions}}
                        return { {{#vendorExtensions}}{{#x-isPost}}id,{{/x-isPost}}{{/vendorExtensions}} ...body };
                } else {
                        throw new z.errors.Error(response.data);
                }
            });
    },
    {{! sample: sample }}
  }
};
{{/operation}}
{{/operations}}
