/* tslint:disable:no-unused-locals */
import { ZObject, Bundle } from 'zapier-platform-core'
import qs from 'querystring';
import { ObjectSerializer } from '../model/models';

// ===============================================
// This file is autogenerated - Please do not edit
// ===============================================
{{#operations}}

type InputBundle<T extends readonly Record<'key', any>[]> = Bundle<Record<T[number]['key'], any>>;

{{#operation}}
const {{operationId}}Input = [
    {{#allParams}}
    {{^isBodyParam}}
    {{#vendorExtensions}}
    {{^x-isApiKey}}
    {{^x-isContentType}}
    {
        key: '{{paramName}}',
        required: {{#required}}{{#defaultValue}}false{{/defaultValue}}{{/required}}{{^required}}{{#defaultValue}}false{{/defaultValue}}{{/required}}{{^required}}{{^defaultValue}}false{{/defaultValue}}{{/required}}{{#required}}{{^defaultValue}}true{{/defaultValue}}{{/required}},
        label: '{{baseName}}',
        helpText: '{{{description}}}',
        {{#isEnum}}
        choices: {
            {{#_enum}}
                '{{.}}': '{{.}}',
            {{/_enum}}
        }
        {{/isEnum}}
    },
    {{/x-isContentType}}
    {{/x-isApiKey}}
    {{/vendorExtensions}}
    {{/isBodyParam}}
    {{#isBodyParam}}
{{>body_param_recursive}}
    {{/isBodyParam}}
    {{/allParams}}
] as const;

{{/operation}}

{{#operation}}
export const {{operationId}} = {
  key: '{{classVarName}}',
  noun: '{{baseName}}',

  display: {
    label: '{{summary}}',
    description: '{{notes}}'
  },

  operation: {
    inputFields: {{operationId}}Input,
    perform: async (z: ZObject, bundle: InputBundle<typeof {{operationId}}Input>) => {
        const {
            {{#allParams}}
            {{^isBodyParam}}
            {{#vendorExtensions}}
            {{^x-isApiKey}}
            {{^x-isContentType}}
            {{paramName}}{{#defaultValue}} = {{{defaultValue}}}{{/defaultValue}},
            {{/x-isContentType}}
            {{/x-isApiKey}}
            {{/vendorExtensions}}
            {{/isBodyParam}}
            {{/allParams}}
            {{#bodyParam}}
            ...{{paramName}}
            {{/bodyParam}}
        } = bundle.inputData || {};

        const localVarPath = bundle.authData.host + '{{{path}}}'{{#pathParams}}
            .replace('{' + '{{baseName}}' + '}', encodeURIComponent(String({{paramName}}))){{/pathParams}};
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, bundle.authData.headers);

        let localVarFormParams: any = {};
{{#queryParams}}
        if ({{paramName}} !== undefined) {
            localVarQueryParameters['{{baseName}}'] = ObjectSerializer.serialize({{paramName}}, "{{{dataType}}}");
        }
{{/queryParams}}
{{#headerParams}}
        {{#vendorExtensions}}
        {{^x-isApiKey}}
        {{^x-isContentType}}
        localVarHeaderParams['{{baseName}}'] = {{paramName}} || localVarHeaderParams['{{baseName}}'];
        {{/x-isContentType}}
        {{/x-isApiKey}}
        {{#x-isContentType}}
        localVarHeaderParams['{{baseName}}'] = {{{defaultValue}}};
        {{/x-isContentType}}
        {{/vendorExtensions}}
{{/headerParams}}

        let localVarUseFormData = false;

{{#formParams}}
        if ({{paramName}} !== undefined) {
            {{#isFile}}
            localVarFormParams['{{baseName}}'] = {{paramName}};
            {{/isFile}}
            {{^isFile}}
            localVarFormParams['{{baseName}}'] = ObjectSerializer.serialize({{paramName}}, "{{{dataType}}}");
            {{/isFile}}
        }
{{#isFile}}
        localVarUseFormData = true;
{{/isFile}}

{{/formParams}}
        const queryString = qs.stringify(localVarQueryParameters);
        const responsePromise = z.request({
            method: '{{httpMethod}}' as const,
            headers: localVarHeaderParams,
            url: `${localVarPath}${queryString}`,
            {{^isResponseFile}}
            {{/isResponseFile}}
            {{#isResponseFile}}
            encoding: null,
            {{/isResponseFile}}
            {{#bodyParam}}
            body: ObjectSerializer.serialize({{paramName}}, "{{{dataType}}}")
            {{/bodyParam}}
        });
        return responsePromise
            .then(response => {
                if (response.status && response.status >= 200 && response.status <= 299) {
                        let body = {};
                        {{#returnType}}
                        body = ObjectSerializer.deserialize(response.data, "{{{.}}}");
                        {{/returnType}}
                        {{#vendorExtensions}}{{#x-isPost}}
                        // Special case to extract the resource identifier from the `Location` header.
                        const checkLocation = response?.headers?.location?.match(/\/([^\/]+)\/?$/);
                        let id = (checkLocation && checkLocation[1]) ? checkLocation[1] : undefined;
                        {{/x-isPost}}{{/vendorExtensions}}
                        return { {{#vendorExtensions}}{{#x-isPost}}id,{{/x-isPost}}{{/vendorExtensions}} ...body };
                } else {
                        throw new z.errors.Error(response.data);
                }
            });
    },
    {{! sample: sample }}
  }
};
{{/operation}}
{{/operations}}
