import { VERSION } from './version';
{{#apiInfo}}
{{#apis}}
{{#operations}}
import { {{ classname }} } from './api/{{ classFilename }}';
{{/operations}}
{{/apis}}

const authentication = {
    type: 'custom',
    test: (request, z, bundle) => {
        const options = {
            url: bundle.authData.host,
            method: 'GET',
        };

        return z.request(options);
    },
    fields: [
      {
        key: 'host',
        type: 'string',
        required: true,
        helpText: 'Found in your browsers address bar after logging in.',
        choices: {
            'Australia': 'https://api.au.whispir.com',
            'Asia': 'https://api.ap1.whispir.com',
            'United States': 'https://api.us.whispir.com',
        }
      },
      {
        key: 'username',
        type: 'string',
        required: true,
        helpText: 'Used to login.',
      },
      {
        key: 'password',
        type: 'password',
        required: true,
        helpText: 'Used to login.',
      },
      {
        key: 'apiKey',
        type: 'password',
        required: true,
        helpText: 'Found on your settings page.',
      },
    ],
  };
  
  const addHeaders = (request, z, bundle) => {
    request.headers['X-API-KEY'] = bundle.authData.apiKey;
    request.headers.Authorization = `Basic ${Buffer.from(`${bundle.authData.username}:${bundle.authData.password}`).toString("base64")}`;
    request.headers['User-Agent'] = `whispir-zapier-${VERSION}`;
    return request;
  };

  const handleHTTPError = (response, z) => {
    if (response.status >= 400) {
      throw new Error(`Unexpected status code ${response.status}`);
    }
    return response;
  };

  export const App = {
    // This is just shorthand to reference the installed dependencies you have. Zapier will
    // need to know these before we can upload
    version: VERSION,
    platformVersion: require('zapier-platform-core').version,
    authentication: authentication,
  
    // beforeRequest & afterResponse are optional hooks into the provided HTTP client
    beforeRequest: [
      addHeaders,
    ],
  
    afterResponse: [
      handleHTTPError,
    ],
  
    // If you want to define optional resources to simplify creation of triggers, searches, creates - do that here!
    resources: {
        {{#apis}}
        {{#operations}}
        [{{ classname }}.key]: {{ classname }},
        {{/operations}}
        {{/apis}}
    },
  
    // If you want your trigger to show up, you better include it here!
    triggers: {
    },
  
    // If you want your searches to show up, you better include it here!
    searches: {
    },
  
    // If you want your creates to show up, you better include it here!
    creates: {
    }
  };
{{/apiInfo}}
